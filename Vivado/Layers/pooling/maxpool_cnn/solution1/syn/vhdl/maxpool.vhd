-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity maxpool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of maxpool is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "maxpool,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.685200,HLS_SYN_LAT=3557,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=205,HLS_SYN_LUT=605,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sext_ln22_fu_221_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln22_reg_448 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln11_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln11_fu_231_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln12_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_fu_247_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln14_reg_464 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln16_fu_283_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln16_reg_469 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln14_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln12_fu_313_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln15_fu_329_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln15_reg_482 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln15_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_load_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal select_ln17_fu_438_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal r_0_0_reg_98 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_0_0_reg_110 : STD_LOGIC_VECTOR (4 downto 0);
    signal max_3_0_reg_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_r_0_0_reg_135 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_4_0_reg_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_c_0_0_reg_158 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln22_1_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln16_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_181_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_191_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_203_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln22_fu_199_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln22_1_fu_211_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln22_fu_215_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln14_fu_237_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_fu_253_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_259_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_271_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln16_fu_267_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln16_1_fu_279_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_289_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln22_2_fu_299_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln22_fu_303_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln15_fu_319_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_1_fu_335_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln16_2_fu_341_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln16_2_fu_345_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln17_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln17_1_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_358_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln17_fu_368_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln17_1_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_376_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln17_1_fu_386_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln17_3_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_2_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln17_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln17_1_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln17_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln17_1_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component maxpool_fcmp_32nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    maxpool_fcmp_32nsbkb_U1 : component maxpool_fcmp_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_r_q0,
        din1 => max_4_0_reg_146,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_169_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_0_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_0_reg_110 <= add_ln12_fu_313_p2;
            elsif (((icmp_ln11_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_0_reg_110 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k_c_0_0_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                k_c_0_0_reg_158 <= add_ln15_reg_482;
            elsif (((icmp_ln14_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k_c_0_0_reg_158 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_r_0_0_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_r_0_0_reg_135 <= add_ln14_reg_464;
            elsif (((icmp_ln12_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_r_0_0_reg_135 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    max_3_0_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                max_3_0_reg_122 <= max_4_0_reg_146;
            elsif (((icmp_ln12_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                max_3_0_reg_122 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    max_4_0_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                max_4_0_reg_146 <= select_ln17_fu_438_p3;
            elsif (((icmp_ln14_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                max_4_0_reg_146 <= max_3_0_reg_122;
            end if; 
        end if;
    end process;

    r_0_0_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_0_reg_98 <= add_ln11_fu_231_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_0_reg_98 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln14_reg_464 <= add_ln14_fu_247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln15_reg_482 <= add_ln15_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                in_load_reg_492 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sext_ln22_reg_448(10 downto 2) <= sext_ln22_fu_221_p1(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    sub_ln16_reg_469(10 downto 2) <= sub_ln16_fu_283_p2(10 downto 2);
            end if;
        end if;
    end process;
    sext_ln22_reg_448(1 downto 0) <= "00";
    sub_ln16_reg_469(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln11_fu_175_p2, ap_CS_fsm_state3, icmp_ln12_fu_225_p2, ap_CS_fsm_state4, icmp_ln14_fu_241_p2, ap_CS_fsm_state5, icmp_ln15_fu_323_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln11_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln12_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln14_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln15_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln11_fu_231_p2 <= std_logic_vector(unsigned(r_0_0_reg_98) + unsigned(ap_const_lv5_2));
    add_ln12_fu_313_p2 <= std_logic_vector(unsigned(c_0_0_reg_110) + unsigned(ap_const_lv5_2));
    add_ln14_fu_247_p2 <= std_logic_vector(unsigned(k_r_0_0_reg_135) + unsigned(ap_const_lv2_1));
    add_ln15_fu_329_p2 <= std_logic_vector(unsigned(k_c_0_0_reg_158) + unsigned(ap_const_lv2_1));
    add_ln16_1_fu_335_p2 <= std_logic_vector(unsigned(zext_ln15_fu_319_p1) + unsigned(c_0_0_reg_110));
    add_ln16_2_fu_345_p2 <= std_logic_vector(unsigned(sub_ln16_reg_469) + unsigned(zext_ln16_2_fu_341_p1));
    add_ln16_fu_253_p2 <= std_logic_vector(unsigned(zext_ln14_fu_237_p1) + unsigned(r_0_0_reg_98));
    add_ln22_fu_303_p2 <= std_logic_vector(signed(sext_ln22_reg_448) + signed(zext_ln22_2_fu_299_p1));
    and_ln17_1_fu_432_p2 <= (grp_fu_169_p2 and and_ln17_fu_426_p2);
    and_ln17_fu_426_p2 <= (or_ln17_fu_402_p2 and or_ln17_1_fu_420_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln11_fu_175_p2)
    begin
        if (((icmp_ln11_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln11_fu_175_p2)
    begin
        if (((icmp_ln11_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln17_1_fu_372_p1 <= max_4_0_reg_146;
    bitcast_ln17_fu_355_p1 <= in_load_reg_492;
    icmp_ln11_fu_175_p2 <= "1" when (unsigned(r_0_0_reg_98) < unsigned(ap_const_lv5_1C)) else "0";
    icmp_ln12_fu_225_p2 <= "1" when (unsigned(c_0_0_reg_110) < unsigned(ap_const_lv5_1C)) else "0";
    icmp_ln14_fu_241_p2 <= "1" when (k_r_0_0_reg_135 = ap_const_lv2_2) else "0";
    icmp_ln15_fu_323_p2 <= "1" when (k_c_0_0_reg_158 = ap_const_lv2_2) else "0";
    icmp_ln17_1_fu_396_p2 <= "1" when (trunc_ln17_fu_368_p1 = ap_const_lv23_0) else "0";
    icmp_ln17_2_fu_408_p2 <= "0" when (tmp_5_fu_376_p4 = ap_const_lv8_FF) else "1";
    icmp_ln17_3_fu_414_p2 <= "1" when (trunc_ln17_1_fu_386_p1 = ap_const_lv23_0) else "0";
    icmp_ln17_fu_390_p2 <= "0" when (tmp_4_fu_358_p4 = ap_const_lv8_FF) else "1";
    in_r_address0 <= sext_ln16_fu_350_p1(10 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln17_1_fu_420_p2 <= (icmp_ln17_3_fu_414_p2 or icmp_ln17_2_fu_408_p2);
    or_ln17_fu_402_p2 <= (icmp_ln17_fu_390_p2 or icmp_ln17_1_fu_396_p2);
    out_r_address0 <= sext_ln22_1_fu_308_p1(13 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= max_3_0_reg_122;

    out_r_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln14_fu_241_p2)
    begin
        if (((icmp_ln14_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln17_fu_438_p3 <= 
        in_load_reg_492 when (and_ln17_1_fu_432_p2(0) = '1') else 
        max_4_0_reg_146;
        sext_ln16_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_2_fu_345_p2),64));

        sext_ln22_1_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln22_fu_303_p2),64));

        sext_ln22_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln22_fu_215_p2),11));

    sub_ln16_fu_283_p2 <= std_logic_vector(unsigned(zext_ln16_fu_267_p1) - unsigned(zext_ln16_1_fu_279_p1));
    sub_ln22_fu_215_p2 <= std_logic_vector(unsigned(zext_ln22_fu_199_p1) - unsigned(zext_ln22_1_fu_211_p1));
    tmp_10_fu_259_p3 <= (add_ln16_fu_253_p2 & ap_const_lv5_0);
    tmp_11_fu_271_p3 <= (add_ln16_fu_253_p2 & ap_const_lv2_0);
    tmp_4_fu_358_p4 <= bitcast_ln17_fu_355_p1(30 downto 23);
    tmp_5_fu_376_p4 <= bitcast_ln17_1_fu_372_p1(30 downto 23);
    tmp_7_fu_181_p4 <= r_0_0_reg_98(4 downto 1);
    tmp_8_fu_191_p3 <= (tmp_7_fu_181_p4 & ap_const_lv5_0);
    tmp_9_fu_289_p4 <= c_0_0_reg_110(4 downto 1);
    tmp_s_fu_203_p3 <= (tmp_7_fu_181_p4 & ap_const_lv2_0);
    trunc_ln17_1_fu_386_p1 <= bitcast_ln17_1_fu_372_p1(23 - 1 downto 0);
    trunc_ln17_fu_368_p1 <= bitcast_ln17_fu_355_p1(23 - 1 downto 0);
    zext_ln14_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_r_0_0_reg_135),5));
    zext_ln15_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_c_0_0_reg_158),5));
    zext_ln16_1_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_271_p3),11));
    zext_ln16_2_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_1_fu_335_p2),11));
    zext_ln16_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_259_p3),11));
    zext_ln22_1_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_203_p3),10));
    zext_ln22_2_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_289_p4),11));
    zext_ln22_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_191_p3),10));
end behav;
