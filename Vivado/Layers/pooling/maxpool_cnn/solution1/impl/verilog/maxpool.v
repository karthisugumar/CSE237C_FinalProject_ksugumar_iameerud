// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="maxpool,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.685200,HLS_SYN_LAT=3557,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=205,HLS_SYN_LUT=605,HLS_VERSION=2019_1}" *)

module maxpool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
output  [12:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_ce0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [10:0] sext_ln22_fu_221_p1;
reg  signed [10:0] sext_ln22_reg_448;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln11_fu_175_p2;
wire   [4:0] add_ln11_fu_231_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln12_fu_225_p2;
wire   [1:0] add_ln14_fu_247_p2;
reg   [1:0] add_ln14_reg_464;
wire    ap_CS_fsm_state4;
wire   [10:0] sub_ln16_fu_283_p2;
reg   [10:0] sub_ln16_reg_469;
wire   [0:0] icmp_ln14_fu_241_p2;
wire   [4:0] add_ln12_fu_313_p2;
wire   [1:0] add_ln15_fu_329_p2;
reg   [1:0] add_ln15_reg_482;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln15_fu_323_p2;
reg   [31:0] in_load_reg_492;
wire    ap_CS_fsm_state6;
wire   [31:0] select_ln17_fu_438_p3;
wire    ap_CS_fsm_state7;
reg   [4:0] r_0_0_reg_98;
reg   [4:0] c_0_0_reg_110;
reg   [31:0] max_3_0_reg_122;
reg   [1:0] k_r_0_0_reg_135;
reg   [31:0] max_4_0_reg_146;
reg   [1:0] k_c_0_0_reg_158;
wire  signed [63:0] sext_ln22_1_fu_308_p1;
wire  signed [63:0] sext_ln16_fu_350_p1;
wire   [3:0] tmp_7_fu_181_p4;
wire   [8:0] tmp_8_fu_191_p3;
wire   [5:0] tmp_s_fu_203_p3;
wire   [9:0] zext_ln22_fu_199_p1;
wire   [9:0] zext_ln22_1_fu_211_p1;
wire   [9:0] sub_ln22_fu_215_p2;
wire   [4:0] zext_ln14_fu_237_p1;
wire   [4:0] add_ln16_fu_253_p2;
wire   [9:0] tmp_10_fu_259_p3;
wire   [6:0] tmp_11_fu_271_p3;
wire   [10:0] zext_ln16_fu_267_p1;
wire   [10:0] zext_ln16_1_fu_279_p1;
wire   [3:0] tmp_9_fu_289_p4;
wire   [10:0] zext_ln22_2_fu_299_p1;
wire   [10:0] add_ln22_fu_303_p2;
wire   [4:0] zext_ln15_fu_319_p1;
wire   [4:0] add_ln16_1_fu_335_p2;
wire   [10:0] zext_ln16_2_fu_341_p1;
wire   [10:0] add_ln16_2_fu_345_p2;
wire   [31:0] bitcast_ln17_fu_355_p1;
wire   [31:0] bitcast_ln17_1_fu_372_p1;
wire   [7:0] tmp_4_fu_358_p4;
wire   [22:0] trunc_ln17_fu_368_p1;
wire   [0:0] icmp_ln17_1_fu_396_p2;
wire   [0:0] icmp_ln17_fu_390_p2;
wire   [7:0] tmp_5_fu_376_p4;
wire   [22:0] trunc_ln17_1_fu_386_p1;
wire   [0:0] icmp_ln17_3_fu_414_p2;
wire   [0:0] icmp_ln17_2_fu_408_p2;
wire   [0:0] or_ln17_fu_402_p2;
wire   [0:0] or_ln17_1_fu_420_p2;
wire   [0:0] and_ln17_fu_426_p2;
wire   [0:0] grp_fu_169_p2;
wire   [0:0] and_ln17_1_fu_432_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

maxpool_fcmp_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
maxpool_fcmp_32nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_r_q0),
    .din1(max_4_0_reg_146),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_169_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_0_reg_110 <= add_ln12_fu_313_p2;
    end else if (((icmp_ln11_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_0_reg_110 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        k_c_0_0_reg_158 <= add_ln15_reg_482;
    end else if (((icmp_ln14_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_c_0_0_reg_158 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_323_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        k_r_0_0_reg_135 <= add_ln14_reg_464;
    end else if (((icmp_ln12_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_r_0_0_reg_135 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_323_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        max_3_0_reg_122 <= max_4_0_reg_146;
    end else if (((icmp_ln12_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        max_3_0_reg_122 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_4_0_reg_146 <= select_ln17_fu_438_p3;
    end else if (((icmp_ln14_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_4_0_reg_146 <= max_3_0_reg_122;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_0_reg_98 <= add_ln11_fu_231_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_0_reg_98 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln14_reg_464 <= add_ln14_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln15_reg_482 <= add_ln15_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_load_reg_492 <= in_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln22_reg_448[10 : 2] <= sext_ln22_fu_221_p1[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln16_reg_469[10 : 2] <= sub_ln16_fu_283_p2[10 : 2];
    end
end

always @ (*) begin
    if (((icmp_ln11_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln11_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln11_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln12_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln14_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln15_fu_323_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_231_p2 = (r_0_0_reg_98 + 5'd2);

assign add_ln12_fu_313_p2 = (c_0_0_reg_110 + 5'd2);

assign add_ln14_fu_247_p2 = (k_r_0_0_reg_135 + 2'd1);

assign add_ln15_fu_329_p2 = (k_c_0_0_reg_158 + 2'd1);

assign add_ln16_1_fu_335_p2 = (zext_ln15_fu_319_p1 + c_0_0_reg_110);

assign add_ln16_2_fu_345_p2 = (sub_ln16_reg_469 + zext_ln16_2_fu_341_p1);

assign add_ln16_fu_253_p2 = (zext_ln14_fu_237_p1 + r_0_0_reg_98);

assign add_ln22_fu_303_p2 = ($signed(sext_ln22_reg_448) + $signed(zext_ln22_2_fu_299_p1));

assign and_ln17_1_fu_432_p2 = (grp_fu_169_p2 & and_ln17_fu_426_p2);

assign and_ln17_fu_426_p2 = (or_ln17_fu_402_p2 & or_ln17_1_fu_420_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bitcast_ln17_1_fu_372_p1 = max_4_0_reg_146;

assign bitcast_ln17_fu_355_p1 = in_load_reg_492;

assign icmp_ln11_fu_175_p2 = ((r_0_0_reg_98 < 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_225_p2 = ((c_0_0_reg_110 < 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_241_p2 = ((k_r_0_0_reg_135 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_323_p2 = ((k_c_0_0_reg_158 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln17_1_fu_396_p2 = ((trunc_ln17_fu_368_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln17_2_fu_408_p2 = ((tmp_5_fu_376_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln17_3_fu_414_p2 = ((trunc_ln17_1_fu_386_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_390_p2 = ((tmp_4_fu_358_p4 != 8'd255) ? 1'b1 : 1'b0);

assign in_r_address0 = sext_ln16_fu_350_p1;

assign or_ln17_1_fu_420_p2 = (icmp_ln17_3_fu_414_p2 | icmp_ln17_2_fu_408_p2);

assign or_ln17_fu_402_p2 = (icmp_ln17_fu_390_p2 | icmp_ln17_1_fu_396_p2);

assign out_r_address0 = sext_ln22_1_fu_308_p1;

assign out_r_d0 = max_3_0_reg_122;

assign select_ln17_fu_438_p3 = ((and_ln17_1_fu_432_p2[0:0] === 1'b1) ? in_load_reg_492 : max_4_0_reg_146);

assign sext_ln16_fu_350_p1 = $signed(add_ln16_2_fu_345_p2);

assign sext_ln22_1_fu_308_p1 = $signed(add_ln22_fu_303_p2);

assign sext_ln22_fu_221_p1 = $signed(sub_ln22_fu_215_p2);

assign sub_ln16_fu_283_p2 = (zext_ln16_fu_267_p1 - zext_ln16_1_fu_279_p1);

assign sub_ln22_fu_215_p2 = (zext_ln22_fu_199_p1 - zext_ln22_1_fu_211_p1);

assign tmp_10_fu_259_p3 = {{add_ln16_fu_253_p2}, {5'd0}};

assign tmp_11_fu_271_p3 = {{add_ln16_fu_253_p2}, {2'd0}};

assign tmp_4_fu_358_p4 = {{bitcast_ln17_fu_355_p1[30:23]}};

assign tmp_5_fu_376_p4 = {{bitcast_ln17_1_fu_372_p1[30:23]}};

assign tmp_7_fu_181_p4 = {{r_0_0_reg_98[4:1]}};

assign tmp_8_fu_191_p3 = {{tmp_7_fu_181_p4}, {5'd0}};

assign tmp_9_fu_289_p4 = {{c_0_0_reg_110[4:1]}};

assign tmp_s_fu_203_p3 = {{tmp_7_fu_181_p4}, {2'd0}};

assign trunc_ln17_1_fu_386_p1 = bitcast_ln17_1_fu_372_p1[22:0];

assign trunc_ln17_fu_368_p1 = bitcast_ln17_fu_355_p1[22:0];

assign zext_ln14_fu_237_p1 = k_r_0_0_reg_135;

assign zext_ln15_fu_319_p1 = k_c_0_0_reg_158;

assign zext_ln16_1_fu_279_p1 = tmp_11_fu_271_p3;

assign zext_ln16_2_fu_341_p1 = add_ln16_1_fu_335_p2;

assign zext_ln16_fu_267_p1 = tmp_10_fu_259_p3;

assign zext_ln22_1_fu_211_p1 = tmp_s_fu_203_p3;

assign zext_ln22_2_fu_299_p1 = tmp_9_fu_289_p4;

assign zext_ln22_fu_199_p1 = tmp_8_fu_191_p3;

always @ (posedge ap_clk) begin
    sext_ln22_reg_448[1:0] <= 2'b00;
    sub_ln16_reg_469[1:0] <= 2'b00;
end

endmodule //maxpool
