// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _flatten_HH_
#define _flatten_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct flatten : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<9> > in_r_address0;
    sc_out< sc_logic > in_r_ce0;
    sc_in< sc_lv<32> > in_r_q0;
    sc_out< sc_lv<9> > out_r_address0;
    sc_out< sc_logic > out_r_ce0;
    sc_out< sc_logic > out_r_we0;
    sc_out< sc_lv<32> > out_r_d0;


    // Module declarations
    flatten(sc_module_name name);
    SC_HAS_PROCESS(flatten);

    ~flatten();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > ifm_fu_156_p2;
    sc_signal< sc_lv<5> > ifm_reg_275;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<9> > idx_fu_162_p2;
    sc_signal< sc_lv<9> > idx_reg_280;
    sc_signal< sc_lv<1> > icmp_ln9_fu_150_p2;
    sc_signal< sc_lv<8> > add_ln12_3_fu_184_p2;
    sc_signal< sc_lv<8> > add_ln12_3_reg_285;
    sc_signal< sc_lv<3> > r_fu_196_p2;
    sc_signal< sc_lv<3> > r_reg_293;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<9> > add_ln12_fu_202_p2;
    sc_signal< sc_lv<9> > add_ln12_reg_298;
    sc_signal< sc_lv<1> > icmp_ln10_fu_190_p2;
    sc_signal< sc_lv<10> > add_ln12_5_fu_229_p2;
    sc_signal< sc_lv<10> > add_ln12_5_reg_303;
    sc_signal< sc_lv<3> > c_fu_241_p2;
    sc_signal< sc_lv<3> > c_reg_311;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln11_fu_235_p2;
    sc_signal< sc_lv<9> > add_ln12_1_fu_261_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<5> > ifm_0_reg_83;
    sc_signal< sc_lv<9> > idx_0_reg_94;
    sc_signal< sc_lv<9> > idx_1_reg_106;
    sc_signal< sc_lv<3> > r_0_reg_117;
    sc_signal< sc_lv<9> > idx_2_reg_128;
    sc_signal< sc_lv<3> > c_0_reg_139;
    sc_signal< sc_lv<64> > zext_ln12_6_fu_256_p1;
    sc_signal< sc_lv<64> > zext_ln12_3_fu_267_p1;
    sc_signal< sc_lv<7> > tmp_2_fu_172_p3;
    sc_signal< sc_lv<8> > zext_ln12_fu_168_p1;
    sc_signal< sc_lv<8> > zext_ln12_1_fu_180_p1;
    sc_signal< sc_lv<8> > zext_ln12_2_fu_208_p1;
    sc_signal< sc_lv<8> > add_ln12_4_fu_212_p2;
    sc_signal< sc_lv<10> > zext_ln12_4_fu_217_p1;
    sc_signal< sc_lv<10> > p_shl1_cast_fu_221_p3;
    sc_signal< sc_lv<10> > zext_ln12_5_fu_247_p1;
    sc_signal< sc_lv<10> > add_ln12_6_fu_251_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<9> ap_const_lv9_19;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<9> ap_const_lv9_5;
    static const sc_lv<9> ap_const_lv9_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln12_1_fu_261_p2();
    void thread_add_ln12_3_fu_184_p2();
    void thread_add_ln12_4_fu_212_p2();
    void thread_add_ln12_5_fu_229_p2();
    void thread_add_ln12_6_fu_251_p2();
    void thread_add_ln12_fu_202_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_c_fu_241_p2();
    void thread_icmp_ln10_fu_190_p2();
    void thread_icmp_ln11_fu_235_p2();
    void thread_icmp_ln9_fu_150_p2();
    void thread_idx_fu_162_p2();
    void thread_ifm_fu_156_p2();
    void thread_in_r_address0();
    void thread_in_r_ce0();
    void thread_out_r_address0();
    void thread_out_r_ce0();
    void thread_out_r_d0();
    void thread_out_r_we0();
    void thread_p_shl1_cast_fu_221_p3();
    void thread_r_fu_196_p2();
    void thread_tmp_2_fu_172_p3();
    void thread_zext_ln12_1_fu_180_p1();
    void thread_zext_ln12_2_fu_208_p1();
    void thread_zext_ln12_3_fu_267_p1();
    void thread_zext_ln12_4_fu_217_p1();
    void thread_zext_ln12_5_fu_247_p1();
    void thread_zext_ln12_6_fu_256_p1();
    void thread_zext_ln12_fu_168_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
