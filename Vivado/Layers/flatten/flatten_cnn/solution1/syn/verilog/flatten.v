// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="flatten,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=993,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=90,HLS_SYN_LUT=258,HLS_VERSION=2019_1}" *)

module flatten (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
output  [8:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_ce0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] ifm_fu_156_p2;
reg   [4:0] ifm_reg_275;
wire    ap_CS_fsm_state2;
wire   [8:0] idx_fu_162_p2;
reg   [8:0] idx_reg_280;
wire   [0:0] icmp_ln9_fu_150_p2;
wire   [7:0] add_ln12_3_fu_184_p2;
reg   [7:0] add_ln12_3_reg_285;
wire   [2:0] r_fu_196_p2;
reg   [2:0] r_reg_293;
wire    ap_CS_fsm_state3;
wire   [8:0] add_ln12_fu_202_p2;
reg   [8:0] add_ln12_reg_298;
wire   [0:0] icmp_ln10_fu_190_p2;
wire   [9:0] add_ln12_5_fu_229_p2;
reg   [9:0] add_ln12_5_reg_303;
wire   [2:0] c_fu_241_p2;
reg   [2:0] c_reg_311;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln11_fu_235_p2;
wire   [8:0] add_ln12_1_fu_261_p2;
wire    ap_CS_fsm_state5;
reg   [4:0] ifm_0_reg_83;
reg   [8:0] idx_0_reg_94;
reg   [8:0] idx_1_reg_106;
reg   [2:0] r_0_reg_117;
reg   [8:0] idx_2_reg_128;
reg   [2:0] c_0_reg_139;
wire   [63:0] zext_ln12_6_fu_256_p1;
wire   [63:0] zext_ln12_3_fu_267_p1;
wire   [6:0] tmp_2_fu_172_p3;
wire   [7:0] zext_ln12_fu_168_p1;
wire   [7:0] zext_ln12_1_fu_180_p1;
wire   [7:0] zext_ln12_2_fu_208_p1;
wire   [7:0] add_ln12_4_fu_212_p2;
wire   [9:0] zext_ln12_4_fu_217_p1;
wire   [9:0] p_shl1_cast_fu_221_p3;
wire   [9:0] zext_ln12_5_fu_247_p1;
wire   [9:0] add_ln12_6_fu_251_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_0_reg_139 <= c_reg_311;
    end else if (((icmp_ln10_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_139 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        idx_0_reg_94 <= idx_reg_280;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        idx_0_reg_94 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_235_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        idx_1_reg_106 <= add_ln12_reg_298;
    end else if (((icmp_ln9_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        idx_1_reg_106 <= idx_0_reg_94;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        idx_2_reg_128 <= add_ln12_1_fu_261_p2;
    end else if (((icmp_ln10_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        idx_2_reg_128 <= idx_1_reg_106;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ifm_0_reg_83 <= ifm_reg_275;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ifm_0_reg_83 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_235_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_reg_117 <= r_reg_293;
    end else if (((icmp_ln9_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_117 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln12_3_reg_285 <= add_ln12_3_fu_184_p2;
        idx_reg_280 <= idx_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln12_5_reg_303 <= add_ln12_5_fu_229_p2;
        add_ln12_reg_298 <= add_ln12_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_311 <= c_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ifm_reg_275 <= ifm_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_reg_293 <= r_fu_196_p2;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln10_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln11_fu_235_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_1_fu_261_p2 = (idx_2_reg_128 + 9'd1);

assign add_ln12_3_fu_184_p2 = (zext_ln12_fu_168_p1 + zext_ln12_1_fu_180_p1);

assign add_ln12_4_fu_212_p2 = (add_ln12_3_reg_285 + zext_ln12_2_fu_208_p1);

assign add_ln12_5_fu_229_p2 = (zext_ln12_4_fu_217_p1 + p_shl1_cast_fu_221_p3);

assign add_ln12_6_fu_251_p2 = (add_ln12_5_reg_303 + zext_ln12_5_fu_247_p1);

assign add_ln12_fu_202_p2 = (idx_1_reg_106 + 9'd5);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign c_fu_241_p2 = (c_0_reg_139 + 3'd1);

assign icmp_ln10_fu_190_p2 = ((r_0_reg_117 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_235_p2 = ((c_0_reg_139 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_150_p2 = ((ifm_0_reg_83 == 5'd16) ? 1'b1 : 1'b0);

assign idx_fu_162_p2 = (idx_0_reg_94 + 9'd25);

assign ifm_fu_156_p2 = (ifm_0_reg_83 + 5'd1);

assign in_r_address0 = zext_ln12_6_fu_256_p1;

assign out_r_address0 = zext_ln12_3_fu_267_p1;

assign out_r_d0 = in_r_q0;

assign p_shl1_cast_fu_221_p3 = {{add_ln12_4_fu_212_p2}, {2'd0}};

assign r_fu_196_p2 = (r_0_reg_117 + 3'd1);

assign tmp_2_fu_172_p3 = {{ifm_0_reg_83}, {2'd0}};

assign zext_ln12_1_fu_180_p1 = tmp_2_fu_172_p3;

assign zext_ln12_2_fu_208_p1 = r_0_reg_117;

assign zext_ln12_3_fu_267_p1 = idx_2_reg_128;

assign zext_ln12_4_fu_217_p1 = add_ln12_4_fu_212_p2;

assign zext_ln12_5_fu_247_p1 = c_0_reg_139;

assign zext_ln12_6_fu_256_p1 = add_ln12_6_fu_251_p2;

assign zext_ln12_fu_168_p1 = ifm_0_reg_83;

endmodule //flatten
