// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="softmax,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.397000,HLS_SYN_LAT=322,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=5,HLS_SYN_FF=1390,HLS_SYN_LUT=2461,HLS_VERSION=2019_1}" *)

module softmax (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_state9 = 33'd256;
parameter    ap_ST_fsm_state10 = 33'd512;
parameter    ap_ST_fsm_state11 = 33'd1024;
parameter    ap_ST_fsm_state12 = 33'd2048;
parameter    ap_ST_fsm_state13 = 33'd4096;
parameter    ap_ST_fsm_state14 = 33'd8192;
parameter    ap_ST_fsm_state15 = 33'd16384;
parameter    ap_ST_fsm_state16 = 33'd32768;
parameter    ap_ST_fsm_state17 = 33'd65536;
parameter    ap_ST_fsm_state18 = 33'd131072;
parameter    ap_ST_fsm_state19 = 33'd262144;
parameter    ap_ST_fsm_state20 = 33'd524288;
parameter    ap_ST_fsm_state21 = 33'd1048576;
parameter    ap_ST_fsm_state22 = 33'd2097152;
parameter    ap_ST_fsm_state23 = 33'd4194304;
parameter    ap_ST_fsm_state24 = 33'd8388608;
parameter    ap_ST_fsm_state25 = 33'd16777216;
parameter    ap_ST_fsm_state26 = 33'd33554432;
parameter    ap_ST_fsm_state27 = 33'd67108864;
parameter    ap_ST_fsm_state28 = 33'd134217728;
parameter    ap_ST_fsm_state29 = 33'd268435456;
parameter    ap_ST_fsm_state30 = 33'd536870912;
parameter    ap_ST_fsm_state31 = 33'd1073741824;
parameter    ap_ST_fsm_state32 = 33'd2147483648;
parameter    ap_ST_fsm_state33 = 33'd4294967296;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
output  [3:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_ce0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] expTable_address0;
reg    expTable_ce0;
wire   [31:0] expTable_q0;
reg   [31:0] reg_193;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state17;
wire   [3:0] p_fu_205_p2;
reg   [3:0] p_reg_393;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln13_fu_211_p1;
reg   [63:0] zext_ln13_reg_398;
wire   [0:0] icmp_ln12_fu_199_p2;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_181_p2;
reg   [31:0] x_assign_reg_413;
wire    ap_CS_fsm_state6;
wire   [31:0] p_Val2_s_fu_216_p1;
reg   [31:0] p_Val2_s_reg_418;
wire    ap_CS_fsm_state7;
wire   [31:0] p_Val2_5_fu_329_p3;
reg   [31:0] p_Val2_5_reg_423;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_176_p2;
wire    ap_CS_fsm_state14;
wire   [3:0] p_1_fu_374_p2;
reg   [3:0] p_1_reg_442;
wire    ap_CS_fsm_state15;
wire   [63:0] zext_ln18_fu_380_p1;
reg   [63:0] zext_ln18_reg_447;
wire   [0:0] icmp_ln17_fu_368_p2;
wire    ap_CS_fsm_state16;
reg   [3:0] idx_address0;
reg    idx_ce0;
reg    idx_we0;
wire   [31:0] idx_q0;
reg   [31:0] denom_0_reg_142;
reg   [3:0] p_0_reg_154;
reg   [3:0] p1_0_reg_165;
wire    ap_CS_fsm_state33;
wire  signed [63:0] sext_ln14_fu_363_p1;
wire  signed [63:0] sext_ln18_fu_385_p1;
wire   [31:0] add_ln13_fu_356_p2;
wire   [31:0] grp_fu_187_p2;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state18;
wire   [22:0] tmp_V_1_fu_229_p1;
wire   [24:0] mantissa_V_fu_233_p4;
wire   [7:0] tmp_V_fu_219_p4;
wire   [8:0] zext_ln339_fu_247_p1;
wire   [8:0] add_ln339_fu_251_p2;
wire   [7:0] sub_ln1311_fu_265_p2;
wire   [0:0] isNeg_fu_257_p3;
wire  signed [8:0] sext_ln1311_fu_271_p1;
wire  signed [8:0] ush_fu_275_p3;
wire  signed [31:0] sext_ln1311_1_fu_283_p1;
wire  signed [24:0] sext_ln1311_2_fu_287_p1;
wire   [78:0] zext_ln682_fu_243_p1;
wire   [78:0] zext_ln1287_fu_291_p1;
wire   [24:0] r_V_fu_295_p2;
wire   [0:0] tmp_fu_307_p3;
wire   [78:0] r_V_1_fu_301_p2;
wire   [31:0] zext_ln662_fu_315_p1;
wire   [31:0] tmp_1_fu_319_p4;
wire   [0:0] p_Result_s_fu_337_p3;
wire   [31:0] result_V_1_fu_344_p2;
wire   [31:0] p_Val2_6_fu_349_p3;
reg   [32:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'd1;
end

softmax_expTable #(
    .DataWidth( 32 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
expTable_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(expTable_address0),
    .ce0(expTable_ce0),
    .q0(expTable_q0)
);

softmax_idx #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
idx_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(idx_address0),
    .ce0(idx_ce0),
    .we0(idx_we0),
    .d0(add_ln13_fu_356_p2),
    .q0(idx_q0)
);

softmax_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
softmax_fadd_32nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(denom_0_reg_142),
    .din1(reg_193),
    .ce(1'b1),
    .dout(grp_fu_176_p2)
);

softmax_fmul_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
softmax_fmul_32nscud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_r_q0),
    .din1(32'd1092616192),
    .ce(1'b1),
    .dout(grp_fu_181_p2)
);

softmax_fdiv_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
softmax_fdiv_32nsdEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_193),
    .din1(denom_0_reg_142),
    .ce(1'b1),
    .dout(grp_fu_187_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        denom_0_reg_142 <= grp_fu_176_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        denom_0_reg_142 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p1_0_reg_165 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        p1_0_reg_165 <= p_1_reg_442;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        p_0_reg_154 <= p_reg_393;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_reg_154 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        p_1_reg_442 <= p_1_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_5_reg_423 <= p_Val2_5_fu_329_p3;
        p_Val2_s_reg_418 <= p_Val2_s_fu_216_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_reg_393 <= p_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_193 <= expTable_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_assign_reg_413 <= grp_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_199_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_reg_398[3 : 0] <= zext_ln13_fu_211_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_368_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        zext_ln18_reg_447[3 : 0] <= zext_ln18_fu_380_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln17_fu_368_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln17_fu_368_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        expTable_address0 = sext_ln18_fu_385_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        expTable_address0 = sext_ln14_fu_363_p1;
    end else begin
        expTable_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state8))) begin
        expTable_ce0 = 1'b1;
    end else begin
        expTable_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        idx_address0 = zext_ln18_fu_380_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        idx_address0 = zext_ln13_reg_398;
    end else begin
        idx_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8))) begin
        idx_ce0 = 1'b1;
    end else begin
        idx_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        idx_we0 = 1'b1;
    end else begin
        idx_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln12_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln17_fu_368_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_356_p2 = (32'd200 + p_Val2_6_fu_349_p3);

assign add_ln339_fu_251_p2 = ($signed(9'd385) + $signed(zext_ln339_fu_247_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign icmp_ln12_fu_199_p2 = ((p_0_reg_154 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_368_p2 = ((p1_0_reg_165 == 4'd10) ? 1'b1 : 1'b0);

assign in_r_address0 = zext_ln13_fu_211_p1;

assign isNeg_fu_257_p3 = add_ln339_fu_251_p2[32'd8];

assign mantissa_V_fu_233_p4 = {{{{1'd1}, {tmp_V_1_fu_229_p1}}}, {1'd0}};

assign out_r_address0 = zext_ln18_reg_447;

assign out_r_d0 = grp_fu_187_p2;

assign p_1_fu_374_p2 = (p1_0_reg_165 + 4'd1);

assign p_Result_s_fu_337_p3 = p_Val2_s_reg_418[32'd31];

assign p_Val2_5_fu_329_p3 = ((isNeg_fu_257_p3[0:0] === 1'b1) ? zext_ln662_fu_315_p1 : tmp_1_fu_319_p4);

assign p_Val2_6_fu_349_p3 = ((p_Result_s_fu_337_p3[0:0] === 1'b1) ? result_V_1_fu_344_p2 : p_Val2_5_reg_423);

assign p_Val2_s_fu_216_p1 = x_assign_reg_413;

assign p_fu_205_p2 = (p_0_reg_154 + 4'd1);

assign r_V_1_fu_301_p2 = zext_ln682_fu_243_p1 << zext_ln1287_fu_291_p1;

assign r_V_fu_295_p2 = mantissa_V_fu_233_p4 >> sext_ln1311_2_fu_287_p1;

assign result_V_1_fu_344_p2 = (32'd0 - p_Val2_5_reg_423);

assign sext_ln1311_1_fu_283_p1 = ush_fu_275_p3;

assign sext_ln1311_2_fu_287_p1 = ush_fu_275_p3;

assign sext_ln1311_fu_271_p1 = $signed(sub_ln1311_fu_265_p2);

assign sext_ln14_fu_363_p1 = $signed(add_ln13_fu_356_p2);

assign sext_ln18_fu_385_p1 = $signed(idx_q0);

assign sub_ln1311_fu_265_p2 = (8'd127 - tmp_V_fu_219_p4);

assign tmp_1_fu_319_p4 = {{r_V_1_fu_301_p2[55:24]}};

assign tmp_V_1_fu_229_p1 = p_Val2_s_fu_216_p1[22:0];

assign tmp_V_fu_219_p4 = {{p_Val2_s_fu_216_p1[30:23]}};

assign tmp_fu_307_p3 = r_V_fu_295_p2[32'd24];

assign ush_fu_275_p3 = ((isNeg_fu_257_p3[0:0] === 1'b1) ? sext_ln1311_fu_271_p1 : add_ln339_fu_251_p2);

assign zext_ln1287_fu_291_p1 = $unsigned(sext_ln1311_1_fu_283_p1);

assign zext_ln13_fu_211_p1 = p_0_reg_154;

assign zext_ln18_fu_380_p1 = p1_0_reg_165;

assign zext_ln339_fu_247_p1 = tmp_V_fu_219_p4;

assign zext_ln662_fu_315_p1 = tmp_fu_307_p3;

assign zext_ln682_fu_243_p1 = mantissa_V_fu_233_p4;

always @ (posedge ap_clk) begin
    zext_ln13_reg_398[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_447[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //softmax
