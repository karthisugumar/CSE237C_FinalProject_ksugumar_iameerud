// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "softmax.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic softmax::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic softmax::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<33> softmax::ap_ST_fsm_state1 = "1";
const sc_lv<33> softmax::ap_ST_fsm_state2 = "10";
const sc_lv<33> softmax::ap_ST_fsm_state3 = "100";
const sc_lv<33> softmax::ap_ST_fsm_state4 = "1000";
const sc_lv<33> softmax::ap_ST_fsm_state5 = "10000";
const sc_lv<33> softmax::ap_ST_fsm_state6 = "100000";
const sc_lv<33> softmax::ap_ST_fsm_state7 = "1000000";
const sc_lv<33> softmax::ap_ST_fsm_state8 = "10000000";
const sc_lv<33> softmax::ap_ST_fsm_state9 = "100000000";
const sc_lv<33> softmax::ap_ST_fsm_state10 = "1000000000";
const sc_lv<33> softmax::ap_ST_fsm_state11 = "10000000000";
const sc_lv<33> softmax::ap_ST_fsm_state12 = "100000000000";
const sc_lv<33> softmax::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<33> softmax::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<32> softmax::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> softmax::ap_const_lv32_8 = "1000";
const sc_lv<32> softmax::ap_const_lv32_10 = "10000";
const sc_lv<32> softmax::ap_const_lv32_1 = "1";
const sc_lv<1> softmax::ap_const_lv1_0 = "0";
const sc_lv<32> softmax::ap_const_lv32_2 = "10";
const sc_lv<32> softmax::ap_const_lv32_5 = "101";
const sc_lv<32> softmax::ap_const_lv32_6 = "110";
const sc_lv<32> softmax::ap_const_lv32_7 = "111";
const sc_lv<32> softmax::ap_const_lv32_D = "1101";
const sc_lv<32> softmax::ap_const_lv32_E = "1110";
const sc_lv<32> softmax::ap_const_lv32_F = "1111";
const sc_lv<4> softmax::ap_const_lv4_0 = "0000";
const sc_lv<32> softmax::ap_const_lv32_20 = "100000";
const sc_lv<1> softmax::ap_const_lv1_1 = "1";
const sc_lv<32> softmax::ap_const_lv32_9 = "1001";
const sc_lv<32> softmax::ap_const_lv32_41200000 = "1000001001000000000000000000000";
const sc_lv<32> softmax::ap_const_lv32_11 = "10001";
const sc_lv<4> softmax::ap_const_lv4_A = "1010";
const sc_lv<4> softmax::ap_const_lv4_1 = "1";
const sc_lv<32> softmax::ap_const_lv32_17 = "10111";
const sc_lv<32> softmax::ap_const_lv32_1E = "11110";
const sc_lv<9> softmax::ap_const_lv9_181 = "110000001";
const sc_lv<8> softmax::ap_const_lv8_7F = "1111111";
const sc_lv<32> softmax::ap_const_lv32_18 = "11000";
const sc_lv<32> softmax::ap_const_lv32_37 = "110111";
const sc_lv<32> softmax::ap_const_lv32_1F = "11111";
const sc_lv<32> softmax::ap_const_lv32_C8 = "11001000";
const bool softmax::ap_const_boolean_1 = true;

softmax::softmax(sc_module_name name) : sc_module(name), mVcdFile(0) {
    expTable_U = new softmax_expTable("expTable_U");
    expTable_U->clk(ap_clk);
    expTable_U->reset(ap_rst);
    expTable_U->address0(expTable_address0);
    expTable_U->ce0(expTable_ce0);
    expTable_U->q0(expTable_q0);
    idx_U = new softmax_idx("idx_U");
    idx_U->clk(ap_clk);
    idx_U->reset(ap_rst);
    idx_U->address0(idx_address0);
    idx_U->ce0(idx_ce0);
    idx_U->we0(idx_we0);
    idx_U->d0(add_ln13_fu_356_p2);
    idx_U->q0(idx_q0);
    softmax_fadd_32nsbkb_U1 = new softmax_fadd_32nsbkb<1,5,32,32,32>("softmax_fadd_32nsbkb_U1");
    softmax_fadd_32nsbkb_U1->clk(ap_clk);
    softmax_fadd_32nsbkb_U1->reset(ap_rst);
    softmax_fadd_32nsbkb_U1->din0(denom_0_reg_142);
    softmax_fadd_32nsbkb_U1->din1(reg_193);
    softmax_fadd_32nsbkb_U1->ce(ap_var_for_const0);
    softmax_fadd_32nsbkb_U1->dout(grp_fu_176_p2);
    softmax_fmul_32nscud_U2 = new softmax_fmul_32nscud<1,4,32,32,32>("softmax_fmul_32nscud_U2");
    softmax_fmul_32nscud_U2->clk(ap_clk);
    softmax_fmul_32nscud_U2->reset(ap_rst);
    softmax_fmul_32nscud_U2->din0(in_r_q0);
    softmax_fmul_32nscud_U2->din1(ap_var_for_const1);
    softmax_fmul_32nscud_U2->ce(ap_var_for_const0);
    softmax_fmul_32nscud_U2->dout(grp_fu_181_p2);
    softmax_fdiv_32nsdEe_U3 = new softmax_fdiv_32nsdEe<1,16,32,32,32>("softmax_fdiv_32nsdEe_U3");
    softmax_fdiv_32nsdEe_U3->clk(ap_clk);
    softmax_fdiv_32nsdEe_U3->reset(ap_rst);
    softmax_fdiv_32nsdEe_U3->din0(reg_193);
    softmax_fdiv_32nsdEe_U3->din1(denom_0_reg_142);
    softmax_fdiv_32nsdEe_U3->ce(ap_var_for_const0);
    softmax_fdiv_32nsdEe_U3->dout(grp_fu_187_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln13_fu_356_p2);
    sensitive << ( p_Val2_6_fu_349_p3 );

    SC_METHOD(thread_add_ln339_fu_251_p2);
    sensitive << ( zext_ln339_fu_247_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( icmp_ln17_fu_368_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( icmp_ln17_fu_368_p2 );

    SC_METHOD(thread_expTable_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( sext_ln14_fu_363_p1 );
    sensitive << ( sext_ln18_fu_385_p1 );

    SC_METHOD(thread_expTable_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_icmp_ln12_fu_199_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_0_reg_154 );

    SC_METHOD(thread_icmp_ln17_fu_368_p2);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( p1_0_reg_165 );

    SC_METHOD(thread_idx_address0);
    sensitive << ( zext_ln13_reg_398 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( zext_ln18_fu_380_p1 );

    SC_METHOD(thread_idx_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_idx_we0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_in_r_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln13_fu_211_p1 );

    SC_METHOD(thread_in_r_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_isNeg_fu_257_p3);
    sensitive << ( add_ln339_fu_251_p2 );

    SC_METHOD(thread_mantissa_V_fu_233_p4);
    sensitive << ( tmp_V_1_fu_229_p1 );

    SC_METHOD(thread_out_r_address0);
    sensitive << ( zext_ln18_reg_447 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_out_r_d0);
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( grp_fu_187_p2 );

    SC_METHOD(thread_out_r_we0);
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_p_1_fu_374_p2);
    sensitive << ( p1_0_reg_165 );

    SC_METHOD(thread_p_Result_s_fu_337_p3);
    sensitive << ( p_Val2_s_reg_418 );

    SC_METHOD(thread_p_Val2_5_fu_329_p3);
    sensitive << ( isNeg_fu_257_p3 );
    sensitive << ( zext_ln662_fu_315_p1 );
    sensitive << ( tmp_1_fu_319_p4 );

    SC_METHOD(thread_p_Val2_6_fu_349_p3);
    sensitive << ( p_Val2_5_reg_423 );
    sensitive << ( p_Result_s_fu_337_p3 );
    sensitive << ( result_V_1_fu_344_p2 );

    SC_METHOD(thread_p_Val2_s_fu_216_p1);
    sensitive << ( x_assign_reg_413 );

    SC_METHOD(thread_p_fu_205_p2);
    sensitive << ( p_0_reg_154 );

    SC_METHOD(thread_r_V_1_fu_301_p2);
    sensitive << ( zext_ln682_fu_243_p1 );
    sensitive << ( zext_ln1287_fu_291_p1 );

    SC_METHOD(thread_r_V_fu_295_p2);
    sensitive << ( mantissa_V_fu_233_p4 );
    sensitive << ( sext_ln1311_2_fu_287_p1 );

    SC_METHOD(thread_result_V_1_fu_344_p2);
    sensitive << ( p_Val2_5_reg_423 );

    SC_METHOD(thread_sext_ln1311_1_fu_283_p1);
    sensitive << ( ush_fu_275_p3 );

    SC_METHOD(thread_sext_ln1311_2_fu_287_p1);
    sensitive << ( ush_fu_275_p3 );

    SC_METHOD(thread_sext_ln1311_fu_271_p1);
    sensitive << ( sub_ln1311_fu_265_p2 );

    SC_METHOD(thread_sext_ln14_fu_363_p1);
    sensitive << ( add_ln13_fu_356_p2 );

    SC_METHOD(thread_sext_ln18_fu_385_p1);
    sensitive << ( idx_q0 );

    SC_METHOD(thread_sub_ln1311_fu_265_p2);
    sensitive << ( tmp_V_fu_219_p4 );

    SC_METHOD(thread_tmp_1_fu_319_p4);
    sensitive << ( r_V_1_fu_301_p2 );

    SC_METHOD(thread_tmp_V_1_fu_229_p1);
    sensitive << ( p_Val2_s_fu_216_p1 );

    SC_METHOD(thread_tmp_V_fu_219_p4);
    sensitive << ( p_Val2_s_fu_216_p1 );

    SC_METHOD(thread_tmp_fu_307_p3);
    sensitive << ( r_V_fu_295_p2 );

    SC_METHOD(thread_ush_fu_275_p3);
    sensitive << ( add_ln339_fu_251_p2 );
    sensitive << ( isNeg_fu_257_p3 );
    sensitive << ( sext_ln1311_fu_271_p1 );

    SC_METHOD(thread_zext_ln1287_fu_291_p1);
    sensitive << ( sext_ln1311_1_fu_283_p1 );

    SC_METHOD(thread_zext_ln13_fu_211_p1);
    sensitive << ( p_0_reg_154 );

    SC_METHOD(thread_zext_ln18_fu_380_p1);
    sensitive << ( p1_0_reg_165 );

    SC_METHOD(thread_zext_ln339_fu_247_p1);
    sensitive << ( tmp_V_fu_219_p4 );

    SC_METHOD(thread_zext_ln662_fu_315_p1);
    sensitive << ( tmp_fu_307_p3 );

    SC_METHOD(thread_zext_ln682_fu_243_p1);
    sensitive << ( mantissa_V_fu_233_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln12_fu_199_p2 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( icmp_ln17_fu_368_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "softmax_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_r_address0, "(port)in_r_address0");
    sc_trace(mVcdFile, in_r_ce0, "(port)in_r_ce0");
    sc_trace(mVcdFile, in_r_q0, "(port)in_r_q0");
    sc_trace(mVcdFile, out_r_address0, "(port)out_r_address0");
    sc_trace(mVcdFile, out_r_ce0, "(port)out_r_ce0");
    sc_trace(mVcdFile, out_r_we0, "(port)out_r_we0");
    sc_trace(mVcdFile, out_r_d0, "(port)out_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, expTable_address0, "expTable_address0");
    sc_trace(mVcdFile, expTable_ce0, "expTable_ce0");
    sc_trace(mVcdFile, expTable_q0, "expTable_q0");
    sc_trace(mVcdFile, reg_193, "reg_193");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, p_fu_205_p2, "p_fu_205_p2");
    sc_trace(mVcdFile, p_reg_393, "p_reg_393");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln13_fu_211_p1, "zext_ln13_fu_211_p1");
    sc_trace(mVcdFile, zext_ln13_reg_398, "zext_ln13_reg_398");
    sc_trace(mVcdFile, icmp_ln12_fu_199_p2, "icmp_ln12_fu_199_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_fu_181_p2, "grp_fu_181_p2");
    sc_trace(mVcdFile, x_assign_reg_413, "x_assign_reg_413");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, p_Val2_s_fu_216_p1, "p_Val2_s_fu_216_p1");
    sc_trace(mVcdFile, p_Val2_s_reg_418, "p_Val2_s_reg_418");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, p_Val2_5_fu_329_p3, "p_Val2_5_fu_329_p3");
    sc_trace(mVcdFile, p_Val2_5_reg_423, "p_Val2_5_reg_423");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_176_p2, "grp_fu_176_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, p_1_fu_374_p2, "p_1_fu_374_p2");
    sc_trace(mVcdFile, p_1_reg_442, "p_1_reg_442");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, zext_ln18_fu_380_p1, "zext_ln18_fu_380_p1");
    sc_trace(mVcdFile, zext_ln18_reg_447, "zext_ln18_reg_447");
    sc_trace(mVcdFile, icmp_ln17_fu_368_p2, "icmp_ln17_fu_368_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, idx_address0, "idx_address0");
    sc_trace(mVcdFile, idx_ce0, "idx_ce0");
    sc_trace(mVcdFile, idx_we0, "idx_we0");
    sc_trace(mVcdFile, idx_q0, "idx_q0");
    sc_trace(mVcdFile, denom_0_reg_142, "denom_0_reg_142");
    sc_trace(mVcdFile, p_0_reg_154, "p_0_reg_154");
    sc_trace(mVcdFile, p1_0_reg_165, "p1_0_reg_165");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, sext_ln14_fu_363_p1, "sext_ln14_fu_363_p1");
    sc_trace(mVcdFile, sext_ln18_fu_385_p1, "sext_ln18_fu_385_p1");
    sc_trace(mVcdFile, add_ln13_fu_356_p2, "add_ln13_fu_356_p2");
    sc_trace(mVcdFile, grp_fu_187_p2, "grp_fu_187_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, tmp_V_1_fu_229_p1, "tmp_V_1_fu_229_p1");
    sc_trace(mVcdFile, mantissa_V_fu_233_p4, "mantissa_V_fu_233_p4");
    sc_trace(mVcdFile, tmp_V_fu_219_p4, "tmp_V_fu_219_p4");
    sc_trace(mVcdFile, zext_ln339_fu_247_p1, "zext_ln339_fu_247_p1");
    sc_trace(mVcdFile, add_ln339_fu_251_p2, "add_ln339_fu_251_p2");
    sc_trace(mVcdFile, sub_ln1311_fu_265_p2, "sub_ln1311_fu_265_p2");
    sc_trace(mVcdFile, isNeg_fu_257_p3, "isNeg_fu_257_p3");
    sc_trace(mVcdFile, sext_ln1311_fu_271_p1, "sext_ln1311_fu_271_p1");
    sc_trace(mVcdFile, ush_fu_275_p3, "ush_fu_275_p3");
    sc_trace(mVcdFile, sext_ln1311_1_fu_283_p1, "sext_ln1311_1_fu_283_p1");
    sc_trace(mVcdFile, sext_ln1311_2_fu_287_p1, "sext_ln1311_2_fu_287_p1");
    sc_trace(mVcdFile, zext_ln682_fu_243_p1, "zext_ln682_fu_243_p1");
    sc_trace(mVcdFile, zext_ln1287_fu_291_p1, "zext_ln1287_fu_291_p1");
    sc_trace(mVcdFile, r_V_fu_295_p2, "r_V_fu_295_p2");
    sc_trace(mVcdFile, tmp_fu_307_p3, "tmp_fu_307_p3");
    sc_trace(mVcdFile, r_V_1_fu_301_p2, "r_V_1_fu_301_p2");
    sc_trace(mVcdFile, zext_ln662_fu_315_p1, "zext_ln662_fu_315_p1");
    sc_trace(mVcdFile, tmp_1_fu_319_p4, "tmp_1_fu_319_p4");
    sc_trace(mVcdFile, p_Result_s_fu_337_p3, "p_Result_s_fu_337_p3");
    sc_trace(mVcdFile, result_V_1_fu_344_p2, "result_V_1_fu_344_p2");
    sc_trace(mVcdFile, p_Val2_6_fu_349_p3, "p_Val2_6_fu_349_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("softmax.hdltvin.dat");
    mHdltvoutHandle.open("softmax.hdltvout.dat");
}

softmax::~softmax() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete expTable_U;
    delete idx_U;
    delete softmax_fadd_32nsbkb_U1;
    delete softmax_fmul_32nscud_U2;
    delete softmax_fdiv_32nsdEe_U3;
}

void softmax::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void softmax::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_41200000;
}

void softmax::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        denom_0_reg_142 = grp_fu_176_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        denom_0_reg_142 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln12_fu_199_p2.read(), ap_const_lv1_1))) {
        p1_0_reg_165 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        p1_0_reg_165 = p_1_reg_442.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        p_0_reg_154 = p_reg_393.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_0_reg_154 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        p_1_reg_442 = p_1_fu_374_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        p_Val2_5_reg_423 = p_Val2_5_fu_329_p3.read();
        p_Val2_s_reg_418 = p_Val2_s_fu_216_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        p_reg_393 = p_fu_205_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        reg_193 = expTable_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        x_assign_reg_413 = grp_fu_181_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln12_fu_199_p2.read(), ap_const_lv1_0))) {
        zext_ln13_reg_398 = zext_ln13_fu_211_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln17_fu_368_p2.read()))) {
        zext_ln18_reg_447 = zext_ln18_fu_380_p1.read();
    }
}

void softmax::thread_add_ln13_fu_356_p2() {
    add_ln13_fu_356_p2 = (!ap_const_lv32_C8.is_01() || !p_Val2_6_fu_349_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_C8) + sc_biguint<32>(p_Val2_6_fu_349_p3.read()));
}

void softmax::thread_add_ln339_fu_251_p2() {
    add_ln339_fu_251_p2 = (!ap_const_lv9_181.is_01() || !zext_ln339_fu_247_p1.read().is_01())? sc_lv<9>(): (sc_bigint<9>(ap_const_lv9_181) + sc_biguint<9>(zext_ln339_fu_247_p1.read()));
}

void softmax::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void softmax::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void softmax::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void softmax::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void softmax::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void softmax::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void softmax::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void softmax::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void softmax::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void softmax::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void softmax::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void softmax::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void softmax::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void softmax::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void softmax::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(icmp_ln17_fu_368_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void softmax::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void softmax::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(icmp_ln17_fu_368_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void softmax::thread_expTable_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        expTable_address0 =  (sc_lv<9>) (sext_ln18_fu_385_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        expTable_address0 =  (sc_lv<9>) (sext_ln14_fu_363_p1.read());
    } else {
        expTable_address0 = "XXXXXXXXX";
    }
}

void softmax::thread_expTable_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        expTable_ce0 = ap_const_logic_1;
    } else {
        expTable_ce0 = ap_const_logic_0;
    }
}

void softmax::thread_icmp_ln12_fu_199_p2() {
    icmp_ln12_fu_199_p2 = (!p_0_reg_154.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(p_0_reg_154.read() == ap_const_lv4_A);
}

void softmax::thread_icmp_ln17_fu_368_p2() {
    icmp_ln17_fu_368_p2 = (!p1_0_reg_165.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(p1_0_reg_165.read() == ap_const_lv4_A);
}

void softmax::thread_idx_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        idx_address0 =  (sc_lv<4>) (zext_ln18_fu_380_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        idx_address0 =  (sc_lv<4>) (zext_ln13_reg_398.read());
    } else {
        idx_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void softmax::thread_idx_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        idx_ce0 = ap_const_logic_1;
    } else {
        idx_ce0 = ap_const_logic_0;
    }
}

void softmax::thread_idx_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        idx_we0 = ap_const_logic_1;
    } else {
        idx_we0 = ap_const_logic_0;
    }
}

void softmax::thread_in_r_address0() {
    in_r_address0 =  (sc_lv<4>) (zext_ln13_fu_211_p1.read());
}

void softmax::thread_in_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        in_r_ce0 = ap_const_logic_1;
    } else {
        in_r_ce0 = ap_const_logic_0;
    }
}

void softmax::thread_isNeg_fu_257_p3() {
    isNeg_fu_257_p3 = add_ln339_fu_251_p2.read().range(8, 8);
}

void softmax::thread_mantissa_V_fu_233_p4() {
    mantissa_V_fu_233_p4 = esl_concat<24,1>(esl_concat<1,23>(ap_const_lv1_1, tmp_V_1_fu_229_p1.read()), ap_const_lv1_0);
}

void softmax::thread_out_r_address0() {
    out_r_address0 =  (sc_lv<4>) (zext_ln18_reg_447.read());
}

void softmax::thread_out_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        out_r_ce0 = ap_const_logic_1;
    } else {
        out_r_ce0 = ap_const_logic_0;
    }
}

void softmax::thread_out_r_d0() {
    out_r_d0 = grp_fu_187_p2.read();
}

void softmax::thread_out_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        out_r_we0 = ap_const_logic_1;
    } else {
        out_r_we0 = ap_const_logic_0;
    }
}

void softmax::thread_p_1_fu_374_p2() {
    p_1_fu_374_p2 = (!p1_0_reg_165.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(p1_0_reg_165.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void softmax::thread_p_Result_s_fu_337_p3() {
    p_Result_s_fu_337_p3 = p_Val2_s_reg_418.read().range(31, 31);
}

void softmax::thread_p_Val2_5_fu_329_p3() {
    p_Val2_5_fu_329_p3 = (!isNeg_fu_257_p3.read()[0].is_01())? sc_lv<32>(): ((isNeg_fu_257_p3.read()[0].to_bool())? zext_ln662_fu_315_p1.read(): tmp_1_fu_319_p4.read());
}

void softmax::thread_p_Val2_6_fu_349_p3() {
    p_Val2_6_fu_349_p3 = (!p_Result_s_fu_337_p3.read()[0].is_01())? sc_lv<32>(): ((p_Result_s_fu_337_p3.read()[0].to_bool())? result_V_1_fu_344_p2.read(): p_Val2_5_reg_423.read());
}

void softmax::thread_p_Val2_s_fu_216_p1() {
    p_Val2_s_fu_216_p1 = x_assign_reg_413.read();
}

void softmax::thread_p_fu_205_p2() {
    p_fu_205_p2 = (!p_0_reg_154.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(p_0_reg_154.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void softmax::thread_r_V_1_fu_301_p2() {
    r_V_1_fu_301_p2 = (!zext_ln1287_fu_291_p1.read().is_01())? sc_lv<79>(): zext_ln682_fu_243_p1.read() << (unsigned short)zext_ln1287_fu_291_p1.read().to_uint();
}

void softmax::thread_r_V_fu_295_p2() {
    r_V_fu_295_p2 = (!sext_ln1311_2_fu_287_p1.read().is_01())? sc_lv<25>(): mantissa_V_fu_233_p4.read() >> (unsigned short)sext_ln1311_2_fu_287_p1.read().to_uint();
}

void softmax::thread_result_V_1_fu_344_p2() {
    result_V_1_fu_344_p2 = (!ap_const_lv32_0.is_01() || !p_Val2_5_reg_423.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(p_Val2_5_reg_423.read()));
}

void softmax::thread_sext_ln1311_1_fu_283_p1() {
    sext_ln1311_1_fu_283_p1 = esl_sext<32,9>(ush_fu_275_p3.read());
}

void softmax::thread_sext_ln1311_2_fu_287_p1() {
    sext_ln1311_2_fu_287_p1 = esl_sext<25,9>(ush_fu_275_p3.read());
}

void softmax::thread_sext_ln1311_fu_271_p1() {
    sext_ln1311_fu_271_p1 = esl_sext<9,8>(sub_ln1311_fu_265_p2.read());
}

void softmax::thread_sext_ln14_fu_363_p1() {
    sext_ln14_fu_363_p1 = esl_sext<64,32>(add_ln13_fu_356_p2.read());
}

void softmax::thread_sext_ln18_fu_385_p1() {
    sext_ln18_fu_385_p1 = esl_sext<64,32>(idx_q0.read());
}

void softmax::thread_sub_ln1311_fu_265_p2() {
    sub_ln1311_fu_265_p2 = (!ap_const_lv8_7F.is_01() || !tmp_V_fu_219_p4.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_7F) - sc_biguint<8>(tmp_V_fu_219_p4.read()));
}

void softmax::thread_tmp_1_fu_319_p4() {
    tmp_1_fu_319_p4 = r_V_1_fu_301_p2.read().range(55, 24);
}

void softmax::thread_tmp_V_1_fu_229_p1() {
    tmp_V_1_fu_229_p1 = p_Val2_s_fu_216_p1.read().range(23-1, 0);
}

void softmax::thread_tmp_V_fu_219_p4() {
    tmp_V_fu_219_p4 = p_Val2_s_fu_216_p1.read().range(30, 23);
}

void softmax::thread_tmp_fu_307_p3() {
    tmp_fu_307_p3 = r_V_fu_295_p2.read().range(24, 24);
}

void softmax::thread_ush_fu_275_p3() {
    ush_fu_275_p3 = (!isNeg_fu_257_p3.read()[0].is_01())? sc_lv<9>(): ((isNeg_fu_257_p3.read()[0].to_bool())? sext_ln1311_fu_271_p1.read(): add_ln339_fu_251_p2.read());
}

void softmax::thread_zext_ln1287_fu_291_p1() {
    zext_ln1287_fu_291_p1 = esl_zext<79,32>(sext_ln1311_1_fu_283_p1.read());
}

void softmax::thread_zext_ln13_fu_211_p1() {
    zext_ln13_fu_211_p1 = esl_zext<64,4>(p_0_reg_154.read());
}

void softmax::thread_zext_ln18_fu_380_p1() {
    zext_ln18_fu_380_p1 = esl_zext<64,4>(p1_0_reg_165.read());
}

void softmax::thread_zext_ln339_fu_247_p1() {
    zext_ln339_fu_247_p1 = esl_zext<9,8>(tmp_V_fu_219_p4.read());
}

void softmax::thread_zext_ln662_fu_315_p1() {
    zext_ln662_fu_315_p1 = esl_zext<32,1>(tmp_fu_307_p3.read());
}

void softmax::thread_zext_ln682_fu_243_p1() {
    zext_ln682_fu_243_p1 = esl_zext<79,25>(mantissa_V_fu_233_p4.read());
}

void softmax::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln12_fu_199_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(icmp_ln17_fu_368_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<33>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void softmax::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_address0\" :  \"" << in_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_ce0\" :  \"" << in_r_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_q0\" :  \"" << in_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_address0\" :  \"" << out_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ce0\" :  \"" << out_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_we0\" :  \"" << out_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_d0\" :  \"" << out_r_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

