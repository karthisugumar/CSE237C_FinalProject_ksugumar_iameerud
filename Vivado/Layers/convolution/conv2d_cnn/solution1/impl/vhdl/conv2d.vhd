-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    filt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_ce0 : OUT STD_LOGIC;
    filt_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2d,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.024000,HLS_SYN_LAT=252619,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=721,HLS_SYN_LUT=1333,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_257 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal add_ln36_fu_268_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln36_reg_570 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln38_fu_298_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln38_reg_575 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln36_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_fu_315_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln43_fu_341_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln43_reg_598 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln52_fu_371_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln52_reg_603 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln43_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln44_fu_383_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln44_reg_611 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln46_fu_399_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln46_reg_619 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln48_2_fu_421_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln48_2_reg_624 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln46_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln48_fu_427_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln48_reg_629 : STD_LOGIC_VECTOR (4 downto 0);
    signal acc_buf_addr_2_reg_634 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln47_fu_457_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln47_reg_642 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln48_3_fu_467_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln48_3_reg_647 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln47_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal in_load_reg_662 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_672 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal acc_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_buf_load_1_reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln58_fu_505_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln58_reg_685 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal sub_ln60_fu_535_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln60_reg_690 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln58_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln59_fu_547_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln59_reg_698 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal sext_ln60_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln60_reg_703 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln59_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal acc_buf_ce0 : STD_LOGIC;
    signal acc_buf_we0 : STD_LOGIC;
    signal acc_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_0_0_reg_147 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln37_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_0_0_reg_158 : STD_LOGIC_VECTOR (4 downto 0);
    signal r1_0_0_0_reg_169 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln44_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c2_0_0_0_reg_181 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal k_r_0_0_0_reg_193 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_c_0_0_0_reg_204 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal r3_0_0_reg_215 : STD_LOGIC_VECTOR (4 downto 0);
    signal c4_0_0_reg_226 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal sext_ln38_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln52_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_3_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_4_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal acc_2_0_0_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_274_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_286_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln38_fu_282_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln38_1_fu_294_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln38_2_fu_321_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln38_fu_325_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_347_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_359_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln52_fu_355_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln52_1_fu_367_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_409_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln48_fu_405_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln48_1_fu_417_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln46_fu_389_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln52_2_fu_433_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln52_fu_437_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln48_2_fu_463_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln47_fu_447_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln48_1_fu_472_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_478_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_511_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_523_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln60_fu_519_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln60_1_fu_531_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln60_2_fu_553_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln60_fu_557_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);

    component conv2d_fadd_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_fmul_32ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_acc_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    acc_buf_U : component conv2d_acc_buf
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_buf_address0,
        ce0 => acc_buf_ce0,
        we0 => acc_buf_we0,
        d0 => acc_buf_d0,
        q0 => acc_buf_q0);

    conv2d_fadd_32ns_bkb_U1 : component conv2d_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_237_p0,
        din1 => grp_fu_237_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_237_p2);

    conv2d_fmul_32ns_cud_U2 : component conv2d_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filt_q0,
        din1 => in_load_reg_662,
        ce => ap_const_logic_1,
        dout => grp_fu_241_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    acc_2_0_0_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                acc_2_0_0_fu_76 <= reg_257;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln36_fu_262_p2 = ap_const_lv1_1))) then 
                acc_2_0_0_fu_76 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    c2_0_0_0_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                c2_0_0_0_reg_181 <= add_ln44_reg_611;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln43_fu_335_p2 = ap_const_lv1_0))) then 
                c2_0_0_0_reg_181 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    c4_0_0_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                c4_0_0_reg_226 <= add_ln59_reg_698;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln58_fu_499_p2 = ap_const_lv1_0))) then 
                c4_0_0_reg_226 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    c_0_0_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln37_fu_309_p2 = ap_const_lv1_0))) then 
                c_0_0_reg_158 <= add_ln37_fu_315_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln36_fu_262_p2 = ap_const_lv1_0))) then 
                c_0_0_reg_158 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k_c_0_0_0_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                k_c_0_0_0_reg_204 <= add_ln47_reg_642;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln46_fu_393_p2 = ap_const_lv1_0))) then 
                k_c_0_0_0_reg_204 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_r_0_0_0_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln47_fu_451_p2 = ap_const_lv1_1))) then 
                k_r_0_0_0_reg_193 <= add_ln46_reg_619;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln44_fu_377_p2 = ap_const_lv1_0))) then 
                k_r_0_0_0_reg_193 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r1_0_0_0_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln44_fu_377_p2 = ap_const_lv1_1))) then 
                r1_0_0_0_reg_169 <= add_ln43_reg_598;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln36_fu_262_p2 = ap_const_lv1_1))) then 
                r1_0_0_0_reg_169 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    r3_0_0_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln43_fu_335_p2 = ap_const_lv1_1))) then 
                r3_0_0_reg_215 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln59_fu_541_p2 = ap_const_lv1_1))) then 
                r3_0_0_reg_215 <= add_ln58_reg_685;
            end if; 
        end if;
    end process;

    r_0_0_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln37_fu_309_p2 = ap_const_lv1_1))) then 
                r_0_0_reg_147 <= add_ln36_reg_570;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_0_reg_147 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln46_fu_393_p2 = ap_const_lv1_1))) then
                acc_buf_addr_2_reg_634 <= sext_ln52_fu_442_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                acc_buf_load_1_reg_677 <= acc_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln36_reg_570 <= add_ln36_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln43_reg_598 <= add_ln43_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln44_reg_611 <= add_ln44_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln46_reg_619 <= add_ln46_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln47_reg_642 <= add_ln47_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln46_fu_393_p2 = ap_const_lv1_0))) then
                add_ln48_2_reg_624 <= add_ln48_2_fu_421_p2;
                add_ln48_reg_629 <= add_ln48_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln47_fu_451_p2 = ap_const_lv1_0))) then
                add_ln48_3_reg_647 <= add_ln48_3_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                add_ln58_reg_685 <= add_ln58_fu_505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                add_ln59_reg_698 <= add_ln59_fu_547_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                in_load_reg_662 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_257 <= grp_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln59_fu_541_p2 = ap_const_lv1_0))) then
                sext_ln60_reg_703 <= sext_ln60_fu_562_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln36_fu_262_p2 = ap_const_lv1_0))) then
                    sub_ln38_reg_575(10 downto 2) <= sub_ln38_fu_298_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln43_fu_335_p2 = ap_const_lv1_0))) then
                    sub_ln52_reg_603(10 downto 2) <= sub_ln52_fu_371_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln58_fu_499_p2 = ap_const_lv1_0))) then
                    sub_ln60_reg_690(10 downto 2) <= sub_ln60_fu_535_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_s_reg_672 <= grp_fu_241_p2;
            end if;
        end if;
    end process;
    sub_ln38_reg_575(1 downto 0) <= "00";
    sub_ln52_reg_603(1 downto 0) <= "00";
    sub_ln60_reg_690(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln36_fu_262_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln43_fu_335_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln46_fu_393_p2, ap_CS_fsm_state7, icmp_ln47_fu_451_p2, ap_CS_fsm_state26, icmp_ln58_fu_499_p2, ap_CS_fsm_state27, icmp_ln59_fu_541_p2, icmp_ln37_fu_309_p2, icmp_ln44_fu_377_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln36_fu_262_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln37_fu_309_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln43_fu_335_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln44_fu_377_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln46_fu_393_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln47_fu_451_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln58_fu_499_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln59_fu_541_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    acc_buf_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, acc_buf_addr_2_reg_634, ap_CS_fsm_state27, sext_ln60_fu_562_p1, ap_CS_fsm_state25, sext_ln38_fu_330_p1, sext_ln52_fu_442_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            acc_buf_address0 <= sext_ln60_fu_562_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            acc_buf_address0 <= acc_buf_addr_2_reg_634;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            acc_buf_address0 <= sext_ln52_fu_442_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            acc_buf_address0 <= sext_ln38_fu_330_p1(10 - 1 downto 0);
        else 
            acc_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    acc_buf_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state27, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            acc_buf_ce0 <= ap_const_logic_1;
        else 
            acc_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc_buf_d0_assign_proc : process(reg_257, ap_CS_fsm_state3, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            acc_buf_d0 <= reg_257;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            acc_buf_d0 <= ap_const_lv32_0;
        else 
            acc_buf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    acc_buf_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln37_fu_309_p2, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln37_fu_309_p2 = ap_const_lv1_0)))) then 
            acc_buf_we0 <= ap_const_logic_1;
        else 
            acc_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln36_fu_268_p2 <= std_logic_vector(unsigned(r_0_0_reg_147) + unsigned(ap_const_lv5_1));
    add_ln37_fu_315_p2 <= std_logic_vector(unsigned(c_0_0_reg_158) + unsigned(ap_const_lv5_1));
    add_ln38_fu_325_p2 <= std_logic_vector(unsigned(sub_ln38_reg_575) + unsigned(zext_ln38_2_fu_321_p1));
    add_ln43_fu_341_p2 <= std_logic_vector(unsigned(r1_0_0_0_reg_169) + unsigned(ap_const_lv5_1));
    add_ln44_fu_383_p2 <= std_logic_vector(unsigned(c2_0_0_0_reg_181) + unsigned(ap_const_lv5_1));
    add_ln46_fu_399_p2 <= std_logic_vector(unsigned(k_r_0_0_0_reg_193) + unsigned(ap_const_lv3_1));
    add_ln47_fu_457_p2 <= std_logic_vector(unsigned(k_c_0_0_0_reg_204) + unsigned(ap_const_lv3_1));
    add_ln48_1_fu_472_p2 <= std_logic_vector(unsigned(zext_ln47_fu_447_p1) + unsigned(c2_0_0_0_reg_181));
    add_ln48_2_fu_421_p2 <= std_logic_vector(unsigned(zext_ln48_fu_405_p1) + unsigned(zext_ln48_1_fu_417_p1));
    add_ln48_3_fu_467_p2 <= std_logic_vector(unsigned(add_ln48_2_reg_624) + unsigned(zext_ln48_2_fu_463_p1));
    add_ln48_fu_427_p2 <= std_logic_vector(unsigned(zext_ln46_fu_389_p1) + unsigned(r1_0_0_0_reg_169));
    add_ln52_fu_437_p2 <= std_logic_vector(unsigned(sub_ln52_reg_603) + unsigned(zext_ln52_2_fu_433_p1));
    add_ln58_fu_505_p2 <= std_logic_vector(unsigned(r3_0_0_reg_215) + unsigned(ap_const_lv5_1));
    add_ln59_fu_547_p2 <= std_logic_vector(unsigned(c4_0_0_reg_226) + unsigned(ap_const_lv5_1));
    add_ln60_fu_557_p2 <= std_logic_vector(unsigned(sub_ln60_reg_690) + unsigned(zext_ln60_2_fu_553_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state26, icmp_ln58_fu_499_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln58_fu_499_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state26, icmp_ln58_fu_499_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln58_fu_499_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    filt_address0 <= zext_ln48_4_fu_490_p1(5 - 1 downto 0);

    filt_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            filt_ce0 <= ap_const_logic_1;
        else 
            filt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_237_p0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state20, acc_buf_load_1_reg_677, acc_2_0_0_fu_76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_237_p0 <= acc_buf_load_1_reg_677;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_237_p0 <= acc_2_0_0_fu_76;
        else 
            grp_fu_237_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_237_p1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state20, tmp_s_reg_672, acc_2_0_0_fu_76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_237_p1 <= acc_2_0_0_fu_76;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_237_p1 <= tmp_s_reg_672;
        else 
            grp_fu_237_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln36_fu_262_p2 <= "1" when (r_0_0_reg_147 = ap_const_lv5_1C) else "0";
    icmp_ln37_fu_309_p2 <= "1" when (c_0_0_reg_158 = ap_const_lv5_1C) else "0";
    icmp_ln43_fu_335_p2 <= "1" when (r1_0_0_0_reg_169 = ap_const_lv5_1C) else "0";
    icmp_ln44_fu_377_p2 <= "1" when (c2_0_0_0_reg_181 = ap_const_lv5_1C) else "0";
    icmp_ln46_fu_393_p2 <= "1" when (k_r_0_0_0_reg_193 = ap_const_lv3_5) else "0";
    icmp_ln47_fu_451_p2 <= "1" when (k_c_0_0_0_reg_204 = ap_const_lv3_5) else "0";
    icmp_ln58_fu_499_p2 <= "1" when (r3_0_0_reg_215 = ap_const_lv5_1C) else "0";
    icmp_ln59_fu_541_p2 <= "1" when (c4_0_0_reg_226 = ap_const_lv5_1C) else "0";
    in_r_address0 <= zext_ln48_3_fu_485_p1(10 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_address0 <= sext_ln60_reg_703(10 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= acc_buf_q0;

    out_r_we0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln38_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln38_fu_325_p2),64));

        sext_ln52_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln52_fu_437_p2),64));

        sext_ln60_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln60_fu_557_p2),64));

    sub_ln38_fu_298_p2 <= std_logic_vector(unsigned(zext_ln38_fu_282_p1) - unsigned(zext_ln38_1_fu_294_p1));
    sub_ln52_fu_371_p2 <= std_logic_vector(unsigned(zext_ln52_fu_355_p1) - unsigned(zext_ln52_1_fu_367_p1));
    sub_ln60_fu_535_p2 <= std_logic_vector(unsigned(zext_ln60_fu_519_p1) - unsigned(zext_ln60_1_fu_531_p1));
    tmp_10_fu_359_p3 <= (r1_0_0_0_reg_169 & ap_const_lv2_0);
    tmp_11_fu_511_p3 <= (r3_0_0_reg_215 & ap_const_lv5_0);
    tmp_12_fu_523_p3 <= (r3_0_0_reg_215 & ap_const_lv2_0);
    tmp_13_fu_409_p3 <= (k_r_0_0_0_reg_193 & ap_const_lv2_0);
    tmp_14_fu_478_p3 <= (add_ln48_reg_629 & add_ln48_1_fu_472_p2);
    tmp_7_fu_274_p3 <= (r_0_0_reg_147 & ap_const_lv5_0);
    tmp_8_fu_286_p3 <= (r_0_0_reg_147 & ap_const_lv2_0);
    tmp_9_fu_347_p3 <= (r1_0_0_0_reg_169 & ap_const_lv5_0);
    zext_ln38_1_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_286_p3),11));
    zext_ln38_2_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_0_reg_158),11));
    zext_ln38_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_274_p3),11));
    zext_ln46_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_r_0_0_0_reg_193),5));
    zext_ln47_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_c_0_0_0_reg_204),5));
    zext_ln48_1_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_409_p3),6));
    zext_ln48_2_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_c_0_0_0_reg_204),6));
    zext_ln48_3_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_478_p3),64));
    zext_ln48_4_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_3_reg_647),64));
    zext_ln48_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_r_0_0_0_reg_193),6));
    zext_ln52_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_359_p3),11));
    zext_ln52_2_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c2_0_0_0_reg_181),11));
    zext_ln52_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_347_p3),11));
    zext_ln60_1_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_523_p3),11));
    zext_ln60_2_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c4_0_0_reg_226),11));
    zext_ln60_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_511_p3),11));
end behav;
