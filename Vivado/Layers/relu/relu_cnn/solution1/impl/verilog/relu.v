// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="relu,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.685200,HLS_SYN_LAT=19165,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=197,HLS_SYN_LUT=512,HLS_VERSION=2019_1}" *)

module relu (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
output  [12:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_ce0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] ofm_fu_135_p2;
reg   [2:0] ofm_reg_303;
wire    ap_CS_fsm_state2;
wire  signed [9:0] sext_ln13_fu_171_p1;
reg  signed [9:0] sext_ln13_reg_308;
wire   [0:0] icmp_ln10_fu_129_p2;
wire   [4:0] r_fu_181_p2;
reg   [4:0] r_reg_316;
wire    ap_CS_fsm_state3;
wire   [13:0] sub_ln13_1_fu_220_p2;
reg   [13:0] sub_ln13_1_reg_321;
wire   [0:0] icmp_ln11_fu_175_p2;
wire   [4:0] c_fu_232_p2;
reg   [4:0] c_reg_329;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln13_4_fu_247_p1;
reg   [63:0] zext_ln13_4_reg_334;
wire   [0:0] icmp_ln12_fu_226_p2;
reg   [31:0] data_reg_344;
wire    ap_CS_fsm_state5;
wire   [31:0] data_1_fu_293_p3;
reg   [31:0] data_1_reg_351;
wire    ap_CS_fsm_state6;
reg   [2:0] ofm_0_reg_90;
reg   [4:0] r_0_reg_101;
reg   [4:0] c_0_reg_112;
wire    ap_CS_fsm_state7;
wire   [7:0] tmp_4_fu_141_p3;
wire   [4:0] tmp_5_fu_153_p3;
wire   [8:0] zext_ln13_fu_149_p1;
wire   [8:0] zext_ln13_1_fu_161_p1;
wire   [8:0] sub_ln13_fu_165_p2;
wire   [9:0] zext_ln13_2_fu_187_p1;
wire   [9:0] add_ln13_fu_191_p2;
wire   [8:0] trunc_ln13_fu_196_p1;
wire   [11:0] tmp_6_fu_208_p3;
wire   [13:0] p_shl2_cast_fu_200_p3;
wire  signed [13:0] sext_ln13_1_fu_216_p1;
wire   [13:0] zext_ln13_3_fu_238_p1;
wire   [13:0] add_ln13_1_fu_242_p2;
wire   [31:0] bitcast_ln14_fu_252_p1;
wire   [7:0] tmp_fu_255_p4;
wire   [22:0] trunc_ln14_fu_265_p1;
wire   [0:0] icmp_ln14_1_fu_275_p2;
wire   [0:0] icmp_ln14_fu_269_p2;
wire   [0:0] or_ln14_fu_281_p2;
wire   [0:0] grp_fu_123_p2;
wire   [0:0] and_ln14_fu_287_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

relu_fcmp_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
relu_fcmp_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_r_q0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_123_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_0_reg_112 <= c_reg_329;
    end else if (((icmp_ln11_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_112 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ofm_0_reg_90 <= ofm_reg_303;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ofm_0_reg_90 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_reg_101 <= r_reg_316;
    end else if (((icmp_ln10_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_101 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_329 <= c_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_1_reg_351 <= data_1_fu_293_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_reg_344 <= in_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ofm_reg_303 <= ofm_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_reg_316 <= r_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln13_reg_308[9 : 2] <= sext_ln13_fu_171_p1[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln13_1_reg_321[13 : 2] <= sub_ln13_1_fu_220_p2[13 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln13_4_reg_334[13 : 0] <= zext_ln13_4_fu_247_p1[13 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln11_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln12_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_1_fu_242_p2 = (sub_ln13_1_reg_321 + zext_ln13_3_fu_238_p1);

assign add_ln13_fu_191_p2 = ($signed(sext_ln13_reg_308) + $signed(zext_ln13_2_fu_187_p1));

assign and_ln14_fu_287_p2 = (or_ln14_fu_281_p2 & grp_fu_123_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bitcast_ln14_fu_252_p1 = data_reg_344;

assign c_fu_232_p2 = (c_0_reg_112 + 5'd1);

assign data_1_fu_293_p3 = ((and_ln14_fu_287_p2[0:0] === 1'b1) ? data_reg_344 : 32'd0);

assign icmp_ln10_fu_129_p2 = ((ofm_0_reg_90 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_175_p2 = ((r_0_reg_101 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_226_p2 = ((c_0_reg_112 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln14_1_fu_275_p2 = ((trunc_ln14_fu_265_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_269_p2 = ((tmp_fu_255_p4 != 8'd255) ? 1'b1 : 1'b0);

assign in_r_address0 = zext_ln13_4_fu_247_p1;

assign ofm_fu_135_p2 = (ofm_0_reg_90 + 3'd1);

assign or_ln14_fu_281_p2 = (icmp_ln14_fu_269_p2 | icmp_ln14_1_fu_275_p2);

assign out_r_address0 = zext_ln13_4_reg_334;

assign out_r_d0 = data_1_reg_351;

assign p_shl2_cast_fu_200_p3 = {{trunc_ln13_fu_196_p1}, {5'd0}};

assign r_fu_181_p2 = (r_0_reg_101 + 5'd1);

assign sext_ln13_1_fu_216_p1 = $signed(tmp_6_fu_208_p3);

assign sext_ln13_fu_171_p1 = $signed(sub_ln13_fu_165_p2);

assign sub_ln13_1_fu_220_p2 = ($signed(p_shl2_cast_fu_200_p3) - $signed(sext_ln13_1_fu_216_p1));

assign sub_ln13_fu_165_p2 = (zext_ln13_fu_149_p1 - zext_ln13_1_fu_161_p1);

assign tmp_4_fu_141_p3 = {{ofm_0_reg_90}, {5'd0}};

assign tmp_5_fu_153_p3 = {{ofm_0_reg_90}, {2'd0}};

assign tmp_6_fu_208_p3 = {{add_ln13_fu_191_p2}, {2'd0}};

assign tmp_fu_255_p4 = {{bitcast_ln14_fu_252_p1[30:23]}};

assign trunc_ln13_fu_196_p1 = add_ln13_fu_191_p2[8:0];

assign trunc_ln14_fu_265_p1 = bitcast_ln14_fu_252_p1[22:0];

assign zext_ln13_1_fu_161_p1 = tmp_5_fu_153_p3;

assign zext_ln13_2_fu_187_p1 = r_0_reg_101;

assign zext_ln13_3_fu_238_p1 = c_0_reg_112;

assign zext_ln13_4_fu_247_p1 = add_ln13_1_fu_242_p2;

assign zext_ln13_fu_149_p1 = tmp_4_fu_141_p3;

always @ (posedge ap_clk) begin
    sext_ln13_reg_308[1:0] <= 2'b00;
    sub_ln13_1_reg_321[1:0] <= 2'b00;
    zext_ln13_4_reg_334[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //relu
