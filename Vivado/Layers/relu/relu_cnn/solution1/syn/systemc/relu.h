// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _relu_HH_
#define _relu_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "relu_fcmp_32ns_32bkb.h"

namespace ap_rtl {

struct relu : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<13> > in_r_address0;
    sc_out< sc_logic > in_r_ce0;
    sc_in< sc_lv<32> > in_r_q0;
    sc_out< sc_lv<13> > out_r_address0;
    sc_out< sc_logic > out_r_ce0;
    sc_out< sc_logic > out_r_we0;
    sc_out< sc_lv<32> > out_r_d0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const0;
    sc_signal< sc_lv<5> > ap_var_for_const2;


    // Module declarations
    relu(sc_module_name name);
    SC_HAS_PROCESS(relu);

    ~relu();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    relu_fcmp_32ns_32bkb<1,2,32,32,1>* relu_fcmp_32ns_32bkb_U1;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > ofm_fu_135_p2;
    sc_signal< sc_lv<3> > ofm_reg_303;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<10> > sext_ln13_fu_171_p1;
    sc_signal< sc_lv<10> > sext_ln13_reg_308;
    sc_signal< sc_lv<1> > icmp_ln10_fu_129_p2;
    sc_signal< sc_lv<5> > r_fu_181_p2;
    sc_signal< sc_lv<5> > r_reg_316;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<14> > sub_ln13_1_fu_220_p2;
    sc_signal< sc_lv<14> > sub_ln13_1_reg_321;
    sc_signal< sc_lv<1> > icmp_ln11_fu_175_p2;
    sc_signal< sc_lv<5> > c_fu_232_p2;
    sc_signal< sc_lv<5> > c_reg_329;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > zext_ln13_4_fu_247_p1;
    sc_signal< sc_lv<64> > zext_ln13_4_reg_334;
    sc_signal< sc_lv<1> > icmp_ln12_fu_226_p2;
    sc_signal< sc_lv<32> > data_reg_344;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > data_1_fu_293_p3;
    sc_signal< sc_lv<32> > data_1_reg_351;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<3> > ofm_0_reg_90;
    sc_signal< sc_lv<5> > r_0_reg_101;
    sc_signal< sc_lv<5> > c_0_reg_112;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<8> > tmp_4_fu_141_p3;
    sc_signal< sc_lv<5> > tmp_5_fu_153_p3;
    sc_signal< sc_lv<9> > zext_ln13_fu_149_p1;
    sc_signal< sc_lv<9> > zext_ln13_1_fu_161_p1;
    sc_signal< sc_lv<9> > sub_ln13_fu_165_p2;
    sc_signal< sc_lv<10> > zext_ln13_2_fu_187_p1;
    sc_signal< sc_lv<10> > add_ln13_fu_191_p2;
    sc_signal< sc_lv<9> > trunc_ln13_fu_196_p1;
    sc_signal< sc_lv<12> > tmp_6_fu_208_p3;
    sc_signal< sc_lv<14> > p_shl2_cast_fu_200_p3;
    sc_signal< sc_lv<14> > sext_ln13_1_fu_216_p1;
    sc_signal< sc_lv<14> > zext_ln13_3_fu_238_p1;
    sc_signal< sc_lv<14> > add_ln13_1_fu_242_p2;
    sc_signal< sc_lv<32> > bitcast_ln14_fu_252_p1;
    sc_signal< sc_lv<8> > tmp_fu_255_p4;
    sc_signal< sc_lv<23> > trunc_ln14_fu_265_p1;
    sc_signal< sc_lv<1> > icmp_ln14_1_fu_275_p2;
    sc_signal< sc_lv<1> > icmp_ln14_fu_269_p2;
    sc_signal< sc_lv<1> > or_ln14_fu_281_p2;
    sc_signal< sc_lv<1> > grp_fu_123_p2;
    sc_signal< sc_lv<1> > and_ln14_fu_287_p2;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<5> ap_const_lv5_1C;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const2();
    void thread_ap_clk_no_reset_();
    void thread_add_ln13_1_fu_242_p2();
    void thread_add_ln13_fu_191_p2();
    void thread_and_ln14_fu_287_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_bitcast_ln14_fu_252_p1();
    void thread_c_fu_232_p2();
    void thread_data_1_fu_293_p3();
    void thread_icmp_ln10_fu_129_p2();
    void thread_icmp_ln11_fu_175_p2();
    void thread_icmp_ln12_fu_226_p2();
    void thread_icmp_ln14_1_fu_275_p2();
    void thread_icmp_ln14_fu_269_p2();
    void thread_in_r_address0();
    void thread_in_r_ce0();
    void thread_ofm_fu_135_p2();
    void thread_or_ln14_fu_281_p2();
    void thread_out_r_address0();
    void thread_out_r_ce0();
    void thread_out_r_d0();
    void thread_out_r_we0();
    void thread_p_shl2_cast_fu_200_p3();
    void thread_r_fu_181_p2();
    void thread_sext_ln13_1_fu_216_p1();
    void thread_sext_ln13_fu_171_p1();
    void thread_sub_ln13_1_fu_220_p2();
    void thread_sub_ln13_fu_165_p2();
    void thread_tmp_4_fu_141_p3();
    void thread_tmp_5_fu_153_p3();
    void thread_tmp_6_fu_208_p3();
    void thread_tmp_fu_255_p4();
    void thread_trunc_ln13_fu_196_p1();
    void thread_trunc_ln14_fu_265_p1();
    void thread_zext_ln13_1_fu_161_p1();
    void thread_zext_ln13_2_fu_187_p1();
    void thread_zext_ln13_3_fu_238_p1();
    void thread_zext_ln13_4_fu_247_p1();
    void thread_zext_ln13_fu_149_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
