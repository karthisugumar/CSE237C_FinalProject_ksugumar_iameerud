// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "relu.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic relu::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic relu::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> relu::ap_ST_fsm_state1 = "1";
const sc_lv<7> relu::ap_ST_fsm_state2 = "10";
const sc_lv<7> relu::ap_ST_fsm_state3 = "100";
const sc_lv<7> relu::ap_ST_fsm_state4 = "1000";
const sc_lv<7> relu::ap_ST_fsm_state5 = "10000";
const sc_lv<7> relu::ap_ST_fsm_state6 = "100000";
const sc_lv<7> relu::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> relu::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> relu::ap_const_lv32_1 = "1";
const sc_lv<1> relu::ap_const_lv1_0 = "0";
const sc_lv<32> relu::ap_const_lv32_2 = "10";
const sc_lv<32> relu::ap_const_lv32_3 = "11";
const sc_lv<32> relu::ap_const_lv32_4 = "100";
const sc_lv<32> relu::ap_const_lv32_5 = "101";
const sc_lv<3> relu::ap_const_lv3_0 = "000";
const sc_lv<1> relu::ap_const_lv1_1 = "1";
const sc_lv<5> relu::ap_const_lv5_0 = "00000";
const sc_lv<32> relu::ap_const_lv32_6 = "110";
const sc_lv<3> relu::ap_const_lv3_6 = "110";
const sc_lv<3> relu::ap_const_lv3_1 = "1";
const sc_lv<2> relu::ap_const_lv2_0 = "00";
const sc_lv<5> relu::ap_const_lv5_1C = "11100";
const sc_lv<5> relu::ap_const_lv5_1 = "1";
const sc_lv<32> relu::ap_const_lv32_17 = "10111";
const sc_lv<32> relu::ap_const_lv32_1E = "11110";
const sc_lv<8> relu::ap_const_lv8_FF = "11111111";
const sc_lv<23> relu::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> relu::ap_const_lv5_2 = "10";
const bool relu::ap_const_boolean_1 = true;

relu::relu(sc_module_name name) : sc_module(name), mVcdFile(0) {
    relu_fcmp_32ns_32bkb_U1 = new relu_fcmp_32ns_32bkb<1,2,32,32,1>("relu_fcmp_32ns_32bkb_U1");
    relu_fcmp_32ns_32bkb_U1->clk(ap_clk);
    relu_fcmp_32ns_32bkb_U1->reset(ap_rst);
    relu_fcmp_32ns_32bkb_U1->din0(in_r_q0);
    relu_fcmp_32ns_32bkb_U1->din1(ap_var_for_const0);
    relu_fcmp_32ns_32bkb_U1->ce(ap_var_for_const1);
    relu_fcmp_32ns_32bkb_U1->opcode(ap_var_for_const2);
    relu_fcmp_32ns_32bkb_U1->dout(grp_fu_123_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln13_1_fu_242_p2);
    sensitive << ( sub_ln13_1_reg_321 );
    sensitive << ( zext_ln13_3_fu_238_p1 );

    SC_METHOD(thread_add_ln13_fu_191_p2);
    sensitive << ( sext_ln13_reg_308 );
    sensitive << ( zext_ln13_2_fu_187_p1 );

    SC_METHOD(thread_and_ln14_fu_287_p2);
    sensitive << ( or_ln14_fu_281_p2 );
    sensitive << ( grp_fu_123_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln10_fu_129_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln10_fu_129_p2 );

    SC_METHOD(thread_bitcast_ln14_fu_252_p1);
    sensitive << ( data_reg_344 );

    SC_METHOD(thread_c_fu_232_p2);
    sensitive << ( c_0_reg_112 );

    SC_METHOD(thread_data_1_fu_293_p3);
    sensitive << ( data_reg_344 );
    sensitive << ( and_ln14_fu_287_p2 );

    SC_METHOD(thread_icmp_ln10_fu_129_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ofm_0_reg_90 );

    SC_METHOD(thread_icmp_ln11_fu_175_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( r_0_reg_101 );

    SC_METHOD(thread_icmp_ln12_fu_226_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( c_0_reg_112 );

    SC_METHOD(thread_icmp_ln14_1_fu_275_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( trunc_ln14_fu_265_p1 );

    SC_METHOD(thread_icmp_ln14_fu_269_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_fu_255_p4 );

    SC_METHOD(thread_in_r_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln13_4_fu_247_p1 );

    SC_METHOD(thread_in_r_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ofm_fu_135_p2);
    sensitive << ( ofm_0_reg_90 );

    SC_METHOD(thread_or_ln14_fu_281_p2);
    sensitive << ( icmp_ln14_1_fu_275_p2 );
    sensitive << ( icmp_ln14_fu_269_p2 );

    SC_METHOD(thread_out_r_address0);
    sensitive << ( zext_ln13_4_reg_334 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_out_r_d0);
    sensitive << ( data_1_reg_351 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_out_r_we0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_p_shl2_cast_fu_200_p3);
    sensitive << ( trunc_ln13_fu_196_p1 );

    SC_METHOD(thread_r_fu_181_p2);
    sensitive << ( r_0_reg_101 );

    SC_METHOD(thread_sext_ln13_1_fu_216_p1);
    sensitive << ( tmp_6_fu_208_p3 );

    SC_METHOD(thread_sext_ln13_fu_171_p1);
    sensitive << ( sub_ln13_fu_165_p2 );

    SC_METHOD(thread_sub_ln13_1_fu_220_p2);
    sensitive << ( p_shl2_cast_fu_200_p3 );
    sensitive << ( sext_ln13_1_fu_216_p1 );

    SC_METHOD(thread_sub_ln13_fu_165_p2);
    sensitive << ( zext_ln13_fu_149_p1 );
    sensitive << ( zext_ln13_1_fu_161_p1 );

    SC_METHOD(thread_tmp_4_fu_141_p3);
    sensitive << ( ofm_0_reg_90 );

    SC_METHOD(thread_tmp_5_fu_153_p3);
    sensitive << ( ofm_0_reg_90 );

    SC_METHOD(thread_tmp_6_fu_208_p3);
    sensitive << ( add_ln13_fu_191_p2 );

    SC_METHOD(thread_tmp_fu_255_p4);
    sensitive << ( bitcast_ln14_fu_252_p1 );

    SC_METHOD(thread_trunc_ln13_fu_196_p1);
    sensitive << ( add_ln13_fu_191_p2 );

    SC_METHOD(thread_trunc_ln14_fu_265_p1);
    sensitive << ( bitcast_ln14_fu_252_p1 );

    SC_METHOD(thread_zext_ln13_1_fu_161_p1);
    sensitive << ( tmp_5_fu_153_p3 );

    SC_METHOD(thread_zext_ln13_2_fu_187_p1);
    sensitive << ( r_0_reg_101 );

    SC_METHOD(thread_zext_ln13_3_fu_238_p1);
    sensitive << ( c_0_reg_112 );

    SC_METHOD(thread_zext_ln13_4_fu_247_p1);
    sensitive << ( add_ln13_1_fu_242_p2 );

    SC_METHOD(thread_zext_ln13_fu_149_p1);
    sensitive << ( tmp_4_fu_141_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln10_fu_129_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln11_fu_175_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln12_fu_226_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "relu_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_r_address0, "(port)in_r_address0");
    sc_trace(mVcdFile, in_r_ce0, "(port)in_r_ce0");
    sc_trace(mVcdFile, in_r_q0, "(port)in_r_q0");
    sc_trace(mVcdFile, out_r_address0, "(port)out_r_address0");
    sc_trace(mVcdFile, out_r_ce0, "(port)out_r_ce0");
    sc_trace(mVcdFile, out_r_we0, "(port)out_r_we0");
    sc_trace(mVcdFile, out_r_d0, "(port)out_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ofm_fu_135_p2, "ofm_fu_135_p2");
    sc_trace(mVcdFile, ofm_reg_303, "ofm_reg_303");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, sext_ln13_fu_171_p1, "sext_ln13_fu_171_p1");
    sc_trace(mVcdFile, sext_ln13_reg_308, "sext_ln13_reg_308");
    sc_trace(mVcdFile, icmp_ln10_fu_129_p2, "icmp_ln10_fu_129_p2");
    sc_trace(mVcdFile, r_fu_181_p2, "r_fu_181_p2");
    sc_trace(mVcdFile, r_reg_316, "r_reg_316");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, sub_ln13_1_fu_220_p2, "sub_ln13_1_fu_220_p2");
    sc_trace(mVcdFile, sub_ln13_1_reg_321, "sub_ln13_1_reg_321");
    sc_trace(mVcdFile, icmp_ln11_fu_175_p2, "icmp_ln11_fu_175_p2");
    sc_trace(mVcdFile, c_fu_232_p2, "c_fu_232_p2");
    sc_trace(mVcdFile, c_reg_329, "c_reg_329");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, zext_ln13_4_fu_247_p1, "zext_ln13_4_fu_247_p1");
    sc_trace(mVcdFile, zext_ln13_4_reg_334, "zext_ln13_4_reg_334");
    sc_trace(mVcdFile, icmp_ln12_fu_226_p2, "icmp_ln12_fu_226_p2");
    sc_trace(mVcdFile, data_reg_344, "data_reg_344");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, data_1_fu_293_p3, "data_1_fu_293_p3");
    sc_trace(mVcdFile, data_1_reg_351, "data_1_reg_351");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ofm_0_reg_90, "ofm_0_reg_90");
    sc_trace(mVcdFile, r_0_reg_101, "r_0_reg_101");
    sc_trace(mVcdFile, c_0_reg_112, "c_0_reg_112");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_4_fu_141_p3, "tmp_4_fu_141_p3");
    sc_trace(mVcdFile, tmp_5_fu_153_p3, "tmp_5_fu_153_p3");
    sc_trace(mVcdFile, zext_ln13_fu_149_p1, "zext_ln13_fu_149_p1");
    sc_trace(mVcdFile, zext_ln13_1_fu_161_p1, "zext_ln13_1_fu_161_p1");
    sc_trace(mVcdFile, sub_ln13_fu_165_p2, "sub_ln13_fu_165_p2");
    sc_trace(mVcdFile, zext_ln13_2_fu_187_p1, "zext_ln13_2_fu_187_p1");
    sc_trace(mVcdFile, add_ln13_fu_191_p2, "add_ln13_fu_191_p2");
    sc_trace(mVcdFile, trunc_ln13_fu_196_p1, "trunc_ln13_fu_196_p1");
    sc_trace(mVcdFile, tmp_6_fu_208_p3, "tmp_6_fu_208_p3");
    sc_trace(mVcdFile, p_shl2_cast_fu_200_p3, "p_shl2_cast_fu_200_p3");
    sc_trace(mVcdFile, sext_ln13_1_fu_216_p1, "sext_ln13_1_fu_216_p1");
    sc_trace(mVcdFile, zext_ln13_3_fu_238_p1, "zext_ln13_3_fu_238_p1");
    sc_trace(mVcdFile, add_ln13_1_fu_242_p2, "add_ln13_1_fu_242_p2");
    sc_trace(mVcdFile, bitcast_ln14_fu_252_p1, "bitcast_ln14_fu_252_p1");
    sc_trace(mVcdFile, tmp_fu_255_p4, "tmp_fu_255_p4");
    sc_trace(mVcdFile, trunc_ln14_fu_265_p1, "trunc_ln14_fu_265_p1");
    sc_trace(mVcdFile, icmp_ln14_1_fu_275_p2, "icmp_ln14_1_fu_275_p2");
    sc_trace(mVcdFile, icmp_ln14_fu_269_p2, "icmp_ln14_fu_269_p2");
    sc_trace(mVcdFile, or_ln14_fu_281_p2, "or_ln14_fu_281_p2");
    sc_trace(mVcdFile, grp_fu_123_p2, "grp_fu_123_p2");
    sc_trace(mVcdFile, and_ln14_fu_287_p2, "and_ln14_fu_287_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("relu.hdltvin.dat");
    mHdltvoutHandle.open("relu.hdltvout.dat");
}

relu::~relu() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete relu_fcmp_32ns_32bkb_U1;
}

void relu::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_1;
}

void relu::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_0;
}

void relu::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_2;
}

void relu::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        c_0_reg_112 = c_reg_329.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln11_fu_175_p2.read()))) {
        c_0_reg_112 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln11_fu_175_p2.read(), ap_const_lv1_1))) {
        ofm_0_reg_90 = ofm_reg_303.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ofm_0_reg_90 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln12_fu_226_p2.read(), ap_const_lv1_1))) {
        r_0_reg_101 = r_reg_316.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln10_fu_129_p2.read(), ap_const_lv1_0))) {
        r_0_reg_101 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        c_reg_329 = c_fu_232_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        data_1_reg_351 = data_1_fu_293_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        data_reg_344 = in_r_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ofm_reg_303 = ofm_fu_135_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        r_reg_316 = r_fu_181_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln10_fu_129_p2.read(), ap_const_lv1_0))) {
        sext_ln13_reg_308 = sext_ln13_fu_171_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln11_fu_175_p2.read()))) {
        sub_ln13_1_reg_321 = sub_ln13_1_fu_220_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln12_fu_226_p2.read()))) {
        zext_ln13_4_reg_334 = zext_ln13_4_fu_247_p1.read();
    }
}

void relu::thread_add_ln13_1_fu_242_p2() {
    add_ln13_1_fu_242_p2 = (!sub_ln13_1_reg_321.read().is_01() || !zext_ln13_3_fu_238_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(sub_ln13_1_reg_321.read()) + sc_biguint<14>(zext_ln13_3_fu_238_p1.read()));
}

void relu::thread_add_ln13_fu_191_p2() {
    add_ln13_fu_191_p2 = (!sext_ln13_reg_308.read().is_01() || !zext_ln13_2_fu_187_p1.read().is_01())? sc_lv<10>(): (sc_bigint<10>(sext_ln13_reg_308.read()) + sc_biguint<10>(zext_ln13_2_fu_187_p1.read()));
}

void relu::thread_and_ln14_fu_287_p2() {
    and_ln14_fu_287_p2 = (or_ln14_fu_281_p2.read() & grp_fu_123_p2.read());
}

void relu::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void relu::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void relu::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void relu::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void relu::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void relu::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void relu::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void relu::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln10_fu_129_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void relu::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void relu::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln10_fu_129_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void relu::thread_bitcast_ln14_fu_252_p1() {
    bitcast_ln14_fu_252_p1 = data_reg_344.read();
}

void relu::thread_c_fu_232_p2() {
    c_fu_232_p2 = (!c_0_reg_112.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(c_0_reg_112.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void relu::thread_data_1_fu_293_p3() {
    data_1_fu_293_p3 = (!and_ln14_fu_287_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln14_fu_287_p2.read()[0].to_bool())? data_reg_344.read(): ap_const_lv32_0);
}

void relu::thread_icmp_ln10_fu_129_p2() {
    icmp_ln10_fu_129_p2 = (!ofm_0_reg_90.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(ofm_0_reg_90.read() == ap_const_lv3_6);
}

void relu::thread_icmp_ln11_fu_175_p2() {
    icmp_ln11_fu_175_p2 = (!r_0_reg_101.read().is_01() || !ap_const_lv5_1C.is_01())? sc_lv<1>(): sc_lv<1>(r_0_reg_101.read() == ap_const_lv5_1C);
}

void relu::thread_icmp_ln12_fu_226_p2() {
    icmp_ln12_fu_226_p2 = (!c_0_reg_112.read().is_01() || !ap_const_lv5_1C.is_01())? sc_lv<1>(): sc_lv<1>(c_0_reg_112.read() == ap_const_lv5_1C);
}

void relu::thread_icmp_ln14_1_fu_275_p2() {
    icmp_ln14_1_fu_275_p2 = (!trunc_ln14_fu_265_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln14_fu_265_p1.read() == ap_const_lv23_0);
}

void relu::thread_icmp_ln14_fu_269_p2() {
    icmp_ln14_fu_269_p2 = (!tmp_fu_255_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_255_p4.read() != ap_const_lv8_FF);
}

void relu::thread_in_r_address0() {
    in_r_address0 =  (sc_lv<13>) (zext_ln13_4_fu_247_p1.read());
}

void relu::thread_in_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_r_ce0 = ap_const_logic_1;
    } else {
        in_r_ce0 = ap_const_logic_0;
    }
}

void relu::thread_ofm_fu_135_p2() {
    ofm_fu_135_p2 = (!ofm_0_reg_90.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(ofm_0_reg_90.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void relu::thread_or_ln14_fu_281_p2() {
    or_ln14_fu_281_p2 = (icmp_ln14_1_fu_275_p2.read() | icmp_ln14_fu_269_p2.read());
}

void relu::thread_out_r_address0() {
    out_r_address0 =  (sc_lv<13>) (zext_ln13_4_reg_334.read());
}

void relu::thread_out_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        out_r_ce0 = ap_const_logic_1;
    } else {
        out_r_ce0 = ap_const_logic_0;
    }
}

void relu::thread_out_r_d0() {
    out_r_d0 = data_1_reg_351.read();
}

void relu::thread_out_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        out_r_we0 = ap_const_logic_1;
    } else {
        out_r_we0 = ap_const_logic_0;
    }
}

void relu::thread_p_shl2_cast_fu_200_p3() {
    p_shl2_cast_fu_200_p3 = esl_concat<9,5>(trunc_ln13_fu_196_p1.read(), ap_const_lv5_0);
}

void relu::thread_r_fu_181_p2() {
    r_fu_181_p2 = (!r_0_reg_101.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(r_0_reg_101.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void relu::thread_sext_ln13_1_fu_216_p1() {
    sext_ln13_1_fu_216_p1 = esl_sext<14,12>(tmp_6_fu_208_p3.read());
}

void relu::thread_sext_ln13_fu_171_p1() {
    sext_ln13_fu_171_p1 = esl_sext<10,9>(sub_ln13_fu_165_p2.read());
}

void relu::thread_sub_ln13_1_fu_220_p2() {
    sub_ln13_1_fu_220_p2 = (!p_shl2_cast_fu_200_p3.read().is_01() || !sext_ln13_1_fu_216_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(p_shl2_cast_fu_200_p3.read()) - sc_bigint<14>(sext_ln13_1_fu_216_p1.read()));
}

void relu::thread_sub_ln13_fu_165_p2() {
    sub_ln13_fu_165_p2 = (!zext_ln13_fu_149_p1.read().is_01() || !zext_ln13_1_fu_161_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(zext_ln13_fu_149_p1.read()) - sc_biguint<9>(zext_ln13_1_fu_161_p1.read()));
}

void relu::thread_tmp_4_fu_141_p3() {
    tmp_4_fu_141_p3 = esl_concat<3,5>(ofm_0_reg_90.read(), ap_const_lv5_0);
}

void relu::thread_tmp_5_fu_153_p3() {
    tmp_5_fu_153_p3 = esl_concat<3,2>(ofm_0_reg_90.read(), ap_const_lv2_0);
}

void relu::thread_tmp_6_fu_208_p3() {
    tmp_6_fu_208_p3 = esl_concat<10,2>(add_ln13_fu_191_p2.read(), ap_const_lv2_0);
}

void relu::thread_tmp_fu_255_p4() {
    tmp_fu_255_p4 = bitcast_ln14_fu_252_p1.read().range(30, 23);
}

void relu::thread_trunc_ln13_fu_196_p1() {
    trunc_ln13_fu_196_p1 = add_ln13_fu_191_p2.read().range(9-1, 0);
}

void relu::thread_trunc_ln14_fu_265_p1() {
    trunc_ln14_fu_265_p1 = bitcast_ln14_fu_252_p1.read().range(23-1, 0);
}

void relu::thread_zext_ln13_1_fu_161_p1() {
    zext_ln13_1_fu_161_p1 = esl_zext<9,5>(tmp_5_fu_153_p3.read());
}

void relu::thread_zext_ln13_2_fu_187_p1() {
    zext_ln13_2_fu_187_p1 = esl_zext<10,5>(r_0_reg_101.read());
}

void relu::thread_zext_ln13_3_fu_238_p1() {
    zext_ln13_3_fu_238_p1 = esl_zext<14,5>(c_0_reg_112.read());
}

void relu::thread_zext_ln13_4_fu_247_p1() {
    zext_ln13_4_fu_247_p1 = esl_zext<64,14>(add_ln13_1_fu_242_p2.read());
}

void relu::thread_zext_ln13_fu_149_p1() {
    zext_ln13_fu_149_p1 = esl_zext<9,8>(tmp_4_fu_141_p3.read());
}

void relu::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln10_fu_129_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln11_fu_175_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln12_fu_226_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void relu::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_address0\" :  \"" << in_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_ce0\" :  \"" << in_r_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_q0\" :  \"" << in_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_address0\" :  \"" << out_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ce0\" :  \"" << out_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_we0\" :  \"" << out_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_d0\" :  \"" << out_r_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

