-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity relu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of relu is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "relu,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.685200,HLS_SYN_LAT=19165,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=197,HLS_SYN_LUT=512,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ofm_fu_135_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ofm_reg_303 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln13_fu_171_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln13_reg_308 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln10_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_181_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_reg_316 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln13_1_fu_220_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln13_1_reg_321 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln11_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_232_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_reg_329 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln13_4_fu_247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_4_reg_334 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln12_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_reg_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal data_1_fu_293_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ofm_0_reg_90 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_0_reg_101 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_0_reg_112 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_4_fu_141_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_153_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln13_fu_149_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln13_1_fu_161_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln13_fu_165_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln13_2_fu_187_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_fu_191_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln13_fu_196_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_208_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl2_cast_fu_200_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln13_1_fu_216_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_3_fu_238_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln13_1_fu_242_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln14_fu_252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_255_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln14_fu_265_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln14_1_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln14_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component relu_fcmp_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    relu_fcmp_32ns_32bkb_U1 : component relu_fcmp_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_r_q0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_123_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                c_0_reg_112 <= c_reg_329;
            elsif (((icmp_ln11_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_0_reg_112 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    ofm_0_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ofm_0_reg_90 <= ofm_reg_303;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ofm_0_reg_90 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_0_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                r_0_reg_101 <= r_reg_316;
            elsif (((icmp_ln10_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_0_reg_101 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c_reg_329 <= c_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                data_1_reg_351 <= data_1_fu_293_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                data_reg_344 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ofm_reg_303 <= ofm_fu_135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                r_reg_316 <= r_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sext_ln13_reg_308(9 downto 2) <= sext_ln13_fu_171_p1(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    sub_ln13_1_reg_321(13 downto 2) <= sub_ln13_1_fu_220_p2(13 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln13_4_reg_334(13 downto 0) <= zext_ln13_4_fu_247_p1(13 downto 0);
            end if;
        end if;
    end process;
    sext_ln13_reg_308(1 downto 0) <= "00";
    sub_ln13_1_reg_321(1 downto 0) <= "00";
    zext_ln13_4_reg_334(63 downto 14) <= "00000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_129_p2, ap_CS_fsm_state3, icmp_ln11_fu_175_p2, ap_CS_fsm_state4, icmp_ln12_fu_226_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln11_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln12_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln13_1_fu_242_p2 <= std_logic_vector(unsigned(sub_ln13_1_reg_321) + unsigned(zext_ln13_3_fu_238_p1));
    add_ln13_fu_191_p2 <= std_logic_vector(signed(sext_ln13_reg_308) + signed(zext_ln13_2_fu_187_p1));
    and_ln14_fu_287_p2 <= (or_ln14_fu_281_p2 and grp_fu_123_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_129_p2)
    begin
        if (((icmp_ln10_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_129_p2)
    begin
        if (((icmp_ln10_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln14_fu_252_p1 <= data_reg_344;
    c_fu_232_p2 <= std_logic_vector(unsigned(c_0_reg_112) + unsigned(ap_const_lv5_1));
    data_1_fu_293_p3 <= 
        data_reg_344 when (and_ln14_fu_287_p2(0) = '1') else 
        ap_const_lv32_0;
    icmp_ln10_fu_129_p2 <= "1" when (ofm_0_reg_90 = ap_const_lv3_6) else "0";
    icmp_ln11_fu_175_p2 <= "1" when (r_0_reg_101 = ap_const_lv5_1C) else "0";
    icmp_ln12_fu_226_p2 <= "1" when (c_0_reg_112 = ap_const_lv5_1C) else "0";
    icmp_ln14_1_fu_275_p2 <= "1" when (trunc_ln14_fu_265_p1 = ap_const_lv23_0) else "0";
    icmp_ln14_fu_269_p2 <= "0" when (tmp_fu_255_p4 = ap_const_lv8_FF) else "1";
    in_r_address0 <= zext_ln13_4_fu_247_p1(13 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ofm_fu_135_p2 <= std_logic_vector(unsigned(ofm_0_reg_90) + unsigned(ap_const_lv3_1));
    or_ln14_fu_281_p2 <= (icmp_ln14_fu_269_p2 or icmp_ln14_1_fu_275_p2);
    out_r_address0 <= zext_ln13_4_reg_334(13 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= data_1_reg_351;

    out_r_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl2_cast_fu_200_p3 <= (trunc_ln13_fu_196_p1 & ap_const_lv5_0);
    r_fu_181_p2 <= std_logic_vector(unsigned(r_0_reg_101) + unsigned(ap_const_lv5_1));
        sext_ln13_1_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_208_p3),14));

        sext_ln13_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln13_fu_165_p2),10));

    sub_ln13_1_fu_220_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_200_p3) - unsigned(sext_ln13_1_fu_216_p1));
    sub_ln13_fu_165_p2 <= std_logic_vector(unsigned(zext_ln13_fu_149_p1) - unsigned(zext_ln13_1_fu_161_p1));
    tmp_4_fu_141_p3 <= (ofm_0_reg_90 & ap_const_lv5_0);
    tmp_5_fu_153_p3 <= (ofm_0_reg_90 & ap_const_lv2_0);
    tmp_6_fu_208_p3 <= (add_ln13_fu_191_p2 & ap_const_lv2_0);
    tmp_fu_255_p4 <= bitcast_ln14_fu_252_p1(30 downto 23);
    trunc_ln13_fu_196_p1 <= add_ln13_fu_191_p2(9 - 1 downto 0);
    trunc_ln14_fu_265_p1 <= bitcast_ln14_fu_252_p1(23 - 1 downto 0);
    zext_ln13_1_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_153_p3),9));
    zext_ln13_2_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_101),10));
    zext_ln13_3_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_112),14));
    zext_ln13_4_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_1_fu_242_p2),64));
    zext_ln13_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_141_p3),9));
end behav;
